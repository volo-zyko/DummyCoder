<?xml version="1.0" encoding="utf-8"?><xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.xml-cml.org/schema/cml2/comp" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:val="http://www.w3.org/1999/XSL/Transform" targetNamespace="http://www.xml-cml.org/schema/cml2/comp" elementFormDefault="qualified"><!-- autogenerated from schema components. Do not edit this file--><xsd:attributeGroup name="convention" id="attGp.convention">
  <xsd:attribute id="att.convention" name="convention" type="namespaceRefType">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A reference to a convention.</div>
        <div xmlns="" class="description">
          <p>There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
so that a convention for <tt>molecule</tt> would by default extend to its <tt>bond</tt> and <tt>atom</tt> children. This can be overwritten
    if necessary by an explicit <tt>convention</tt>.</p>
    <p>It may be useful to create conventions with namespaces (e.g. <tt>iupac:name</tt>).
    Use of <tt>convention</tt> will normally require non-STMML semantics, and should be used with
    caution. We would expect that conventions prefixed with "ISO" would be useful,
    such as ISO8601 for dateTimes.</p>
    <p>There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.</p>
        </div>
        <div xmlns="" class="example" href="stmml/examples/convGroup1.xml">&lt;bond convention="fooChem" order="-5"&gt;&lt;/bond&gt;</div>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>   
</xsd:attributeGroup><xsd:attributeGroup id="attGp.delimiter" name="delimiter">
  <xsd:attribute id="att.delimiter" name="delimiter" type="delimiterType">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A delimiter character for arrays and matrices.</div>
        <div xmlns="" class="description">By default array components ('elements' in the non-XML sense) are whitespace-separated.
        This fails for components with embedded whitespace or missing completely:
        <pre>
        Example:
        In the protein database ' CA' and 'CA' are different atom types, and and array could be:
        &lt;array delimiter="/" dictRef="pdb:atomTypes"&gt;/ N/ CA/CA/ N/&lt;/array&gt; 
        </pre>
        Note that the array starts and ends with the delimiter, which must be chosen to avoid accidental use. There is currently no syntax for escaping delimiters.
        </div>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup id="attGp.dataType" name="dataType">
  <xsd:attribute id="att.dataType" name="dataType" type="dataTypeType" default="xsd:string">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">The dataType of an (simple) element or attribute.</div> 
        <div xmlns="" class="description"/> 
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup name="dictRef" id="attGp.dictRef">
  <xsd:attribute id="att.dictRef" name="dictRef" type="namespaceRefType">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">
          <p>A reference to a dictionary entry.</p>
        </div>
   
        <div xmlns="" class="description">
          <p>Elements in data instances such as <a href="el.scalar">scalar</a> may have a
 <tt>dictRef</tt> attribute to point to an entry in a dictionary. To avoid
 excessive use of (mutable) filenames and URIs we recommend a namespace
 prefix, mapped to a namespace URI in the normal manner. In this case,
 of course, the namespace URI must point to a real XML document containing
 <a href="el.entry">entry</a> elements and validated against STMML Schema.</p>
 <p>Where there is concern about the dictionary becoming separated from the document
 the dictionary entries can be physically included as part of the data instance
 and the normal XPointer addressing mechanism can be used.</p>
 <p>This attribute can also be used on <a href="el.dictionary">dictionary</a>
 elements to define the namespace prefix</p>
        </div>
  
        <div xmlns="" class="example" href="stmml/examples/dictRefGroup1.xml">&lt;stmml title="dictRef example"&gt;<br/><br/>&lt;scalar dataType="xsd:float" title="surfaceArea" dictRef="cmlPhys:surfArea" units="units:cm2"&gt;50&lt;/scalar&gt;<br/>  &lt;/stmml&gt;</div>

        <div xmlns="" class="example" href="stmml/examples/dictRefGroup2.xml">&lt;stmml title="dictRef example 2"&gt;<br/>&lt;stm:list&gt;<br/>  &lt;stm:observation&gt;<br/>    &lt;p&gt;We observed &lt;object count="3" dictRef="foo:p1"&gt;&lt;/object&gt; <br/>      constructing dwellings of different material&lt;/p&gt;<br/>  &lt;/stm:observation&gt;<br/>  &lt;stm:entry id="p1" term="pig"&gt;<br/>    &lt;stm:definition&gt;A domesticated animal.&lt;/stm:definition&gt;<br/>    &lt;stm:description&gt;Predators include wolves&lt;/stm:description&gt;<br/>    &lt;stm:description class="scientificName"&gt;Sus scrofa&lt;/stm:description&gt;<br/>  &lt;/stm:entry&gt;<br/>&lt;/stm:list&gt;<br/>&lt;/stmml&gt;</div>
       </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup id="attGp.errorBasis" name="errorBasis">
  <xsd:attribute id="att.errorBasis" name="errorBasis" type="errorBasisType">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary"/> 
        <div xmlns="" class="description"/> 
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup id="attGp.errorValue" name="errorValue">
  <xsd:attribute id="att.errorValue" name="errorValue" type="errorValueType">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary"/> 
        <div xmlns="" class="description"/> 
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup id="attGp.id" name="id">
  <xsd:attribute id="att.id" name="id" type="idType">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">An attribute providing a unique ID for an element.</div>
        <div xmlns="" class="description">
        </div>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup id="attGp.mandatoryId" name="mandatoryId">
  <xsd:attribute id="att.mandatoryId" name="id" type="idType" use="required">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">An attribute providing a mandatory unique ID for an element.</div>
        <div xmlns="" class="description">This is a horrible hack. It should be possible to add 'required' to
	the attributeGroup where used... (Maybe it is and I am still fighting Schema Wars)
        </div>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup id="attGp.max" name="max">
  <xsd:attribute id="att.max" name="max" type="maxType">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary"/> 
        <div xmlns="" class="description"/> 
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup id="attGp.min" name="min">
  <xsd:attribute id="att.min" name="min" type="minType">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary"/> 
        <div xmlns="" class="description"/> 
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup id="attGp.ref" name="ref">
<xsd:attribute id="att.ref" name="ref" type="refType">
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A reference to an element of given type.</div>
      <div xmlns="" class="description">
       <p><tt>ref</tt> modifies an element into a reference to an existing element 
       of that type within the document. This is similar to a pointer and it can be thought of a strongly typed hyperlink.
       It may also be used for "subclassing" or "overriding" elements.
       </p>
   </div>
 
   <div xmlns="" class="example" href="stmml/examples/refGroup1.xml">&lt;stmml title="ref example"&gt;<br/>&lt;cml&gt;<br/>  &lt;molecule id="m1"&gt;<br/>    &lt;atomArray&gt;<br/>      &lt;atom elementType="N"&gt;&lt;/atom&gt;<br/>      &lt;atom elementType="O"&gt;&lt;/atom&gt;<br/>    &lt;/atomArray&gt;<br/>  &lt;/molecule&gt;<br/>  &lt;h:p&gt;The action of &lt;molecule ref="#m1"&gt;&lt;/molecule&gt; on cardiac muscle ...&lt;/h:p&gt;<br/>&lt;/cml&gt;<br/>&lt;/stmml&gt;</div>
   </xsd:documentation>
  </xsd:annotation>
</xsd:attribute>   
</xsd:attributeGroup><xsd:attributeGroup id="attGp.size" name="size">
  <xsd:attribute id="att.size" name="size" type="sizeType">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">The size of an array, matrix, list, etc.</div> 
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup id="attGp.title" name="title">
  <xsd:attribute id="att.title" name="title" type="xsd:string">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A title on an element.</div> 
        <div xmlns="" class="description">No controlled value.</div> 
        <div xmlns="" class="example" href="stmml/examples/title1.xml">&lt;stmml title="title example"&gt;<br/>  &lt;action title="turn on heat" start="T09:00:00" convention="xsd"&gt;&lt;/action&gt;<br/>&lt;/stmml&gt;</div>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup id="attGp.units" name="units">
  <xsd:attribute id="att.units" name="units" type="unitsType">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">Scientific units on an element.</div> 
        <div xmlns="" class="description">These must be taken from a dictionary of units. There should be some mechanism for validating the type of the units against the possible values of the element.</div> 
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup name="tit_id_convGroup" id="attGp.tit_id_convGroup">  
  <xsd:annotation>
    <xsd:documentation>

    </xsd:documentation>
  </xsd:annotation>
    
  <xsd:attributeGroup ref="title"/>
  <xsd:attributeGroup ref="id"/>
  <xsd:attributeGroup ref="convention"/>

</xsd:attributeGroup><xsd:attributeGroup name="tit_id_conv_dictGroup" id="attGp.tit_id_conv_dictGroup">  
  <xsd:annotation>
    <xsd:documentation>

    </xsd:documentation>
  </xsd:annotation>
  <xsd:attributeGroup ref="tit_id_convGroup"/>
  <xsd:attributeGroup ref="dictRef"/>
</xsd:attributeGroup><xsd:element name="array" id="el.array">  
   <xsd:annotation>
     <xsd:documentation>
       <div xmlns="" class="summary">
            A homogenous 1-dimensional array of similar objects.
            </div>
         <div xmlns="" class="description">
         <p>
            <tt>array</tt> manages a homogenous 1-dimensional array of similar objects. These 
            can be encoded as strings (i.e. XSD-like datatypes) and are concatenated as
            string content. The size of the array should always be &gt;= 1.
         </p>
         <p>The default delimiter is whitespace. The <tt>normalize-space()</tt> function of
         XSLT could be used to normalize all whitespace to single spaces and this would not affect
         the value of the array elements. To extract the elements <tt>java.lang.StringTokenizer</tt>
         could be used. If the elements themselves contain whitespace then a different delimiter
         must be used and is identified through the <tt>delimiter</tt> attribute. This method is
         mandatory if it is required to represent empty strings. If a delimiter is used it MUST
         start and end the array - leading and trailing whitespace is ignored. Thus <tt>size+1</tt>
         occurrences of the delimiter character are required. If non-normalized whitespace is to be
         encoded (e.g. newlines, tabs, etc) you are recommended to translate it character-wise
         to XML character entities.
         </p>
         <p>Note that normal Schema validation tools cannot validate the elements
         of <b>array</b> (they are defined as <tt>string</tt>) However if the string is
         split, a temporary schema 
         can be constructed from the type and used for validation. Also the type
         can be contained in a dictionary and software could decide to retrieve this
         and use it for validation.</p>
         <p>When the elements of the <tt>array</tt> are not simple scalars
         (e.g. <a href="el.scalar">scalar</a>s with a value and an error, the 
         <tt>scalar</tt>s should be used as the elements. Although this is 
         verbose, it is simple to understand. If there is a demand for
         more compact representations, it will be possible to define the
         syntax in a later version.</p>
        </div>
<div xmlns="" class="example" href="stmml/examples/array1.xml">&lt;stmml title="array example 1"&gt;<br/><br/>&lt;array size="5" title="value" dataType="xsd:decimal"&gt;  1.23 2.34 3.45 4.56 5.67&lt;/array&gt;<br/>  &lt;/stmml&gt;<p>the <tt>size</tt> attribute is not mandatory but provides a useful validity
         check): </p>
        </div>
<div xmlns="" class="example" href="stmml/examples/array2.xml">&lt;stmml title="array example 2"&gt;<br/><br/>&lt;array size="5" title="initials" dataType="xsd:string" delimiter="/"&gt;/A B//C/D-E/F/&lt;/array&gt;<br/>&lt;/stmml&gt;<p>Note that the second array-element is the empty string ''.</p>
        </div>
<div xmlns="" class="example" href="stmml/examples/array3.xml">&lt;stmml title="array example 3"&gt;<br/><br/>&lt;array title="mass" size="4" units="unit:g" errorBasis="observedStandardDeviation" minValues="10 11 10 9" maxValues="12 14 12 11" errorValues="1 2 1 1" dataType="xsd:float"&gt;11 12.5 10.9 10.2<br/>&lt;/array&gt;<br/>&lt;/stmml&gt;</div>
       </xsd:documentation>
   </xsd:annotation>
   <xsd:complexType><xsd:simpleContent>
       <xsd:extension base="xsd:string">
          <xsd:attributeGroup ref="tit_id_conv_dictGroup"/>
          <xsd:attribute name="dataType" type="dataTypeType" use="required">
             <xsd:annotation>
                  <xsd:documentation>
                   <div xmlns="" class="summary">The mandatory data type.</div>
                   <div xmlns="" class="summary">All elements of the array must have the same dataType.</div>
                  </xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="errorValues" type="floatArrayType">
               <xsd:annotation>
                  <xsd:documentation>
                   <div xmlns="" class="summary">an optional array of error values for numeric arrays.</div>
                  </xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attributeGroup ref="errorBasis"/>
            <xsd:attribute name="minValues" type="floatArrayType">
               <xsd:annotation>
                  <xsd:documentation>
                   <div xmlns="" class="summary">an optional array of minimum values for numeric arrays.</div>
                  </xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="maxValues" type="floatArrayType">
               <xsd:annotation>
                  <xsd:documentation>
                   <div xmlns="" class="summary">an optional array of maximum values for numeric arrays.</div>
                  </xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attributeGroup ref="units"/>
            <xsd:attributeGroup ref="delimiter"/>
            <xsd:attributeGroup ref="size"/>
            <xsd:attributeGroup ref="ref"/>
       </xsd:extension>
     </xsd:simpleContent></xsd:complexType>
</xsd:element><xsd:element name="list" id="el.list">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A generic container with no implied semantics.
      </div>
      <div xmlns="" class="description"><p>
       A generic container with no implied semantics. It just contains
      things and can have attributes which bind conventions to it. It could often
      act as the root element in an STM document.</p>
      </div>
      <div xmlns="" class="example" href="stmml/examples/list1.xml">&lt;stmml title="list example"&gt;<br/><br/>&lt;list&gt;<br/>  &lt;array title="animals" dataType="xsd:string"&gt;frog bear toad&lt;/array&gt;<br/>  &lt;scalar title="weight" dataType="xsd:float"&gt;3.456&lt;/scalar&gt;<br/>&lt;/list&gt;<br/>&lt;/stmml&gt;</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType><xsd:sequence><xsd:any minOccurs="0" maxOccurs="unbounded" processContents="lax"/></xsd:sequence><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attribute name="type" type="xsd:string" id="att.list.type">
      <xsd:annotation>
        <xsd:documentation>
          <div xmlns="" class="summary">Type of the list.</div>
          <div xmlns="" class="description">Semeantics undefined.</div>
          <div xmlns="" class="example" href="stmml/examples/list1.xml">&lt;stmml title="list example"&gt;<br/><br/>&lt;list&gt;<br/>  &lt;array title="animals" dataType="xsd:string"&gt;frog bear toad&lt;/array&gt;<br/>  &lt;scalar title="weight" dataType="xsd:float"&gt;3.456&lt;/scalar&gt;<br/>&lt;/list&gt;<br/>&lt;/stmml&gt;</div>
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute></xsd:complexType>
</xsd:element><xsd:element name="matrix" id="el.matrix">  
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A rectangular matrix of any quantities.
        </div>
        <div xmlns="" class="description"><p>By default <tt>matrix</tt> represents 
        a rectangular matrix of any quantities
            representable as XSD or STMML dataTypes. It consists of 
            <tt>rows*columns</tt> elements, where <tt>columns</tt> is the 
     fasting moving index. Assuming the elements are counted from 1 they are
     ordered <tt>V[1,1],V[1,2],...V[1,columns],V[2,1],V[2,2],...V[2,columns], 
     ...V[rows,1],V[rows,2],...V[rows,columns]</tt></p>
     <p>By default whitespace is used to separate matrix elements; see 
     <a href="el.array">array</a> for details. There are NO characters or markup 
     delimiting the end of rows; authors must be careful!. The <tt>columns</tt>
     and <tt>rows</tt> attributes have no default values; a row vector requires
     a <tt>rows</tt> attribute of 1.</p>
     <p><tt>matrix</tt> also supports many types of square matrix, but at present we
     require all elements to be given, even if the matrix is symmetric, antisymmetric
     or banded diagonal. The <tt>matrixType</tt> attribute allows software to 
     validate and process the type of matrix.</p>
      </div>
        <div xmlns="" class="example" href="stmml/examples/matrix1.xml">&lt;stmml title="matrix example"&gt;<br/><br/>&lt;matrix id="m1" title="matrix-1" dictRef="foo:bar" rows="3" columns="3" dataType="xsd:decimal" delimiter="|" matrixType="squareSymmetric" units="unit:m"&gt;|1.1|1.2|1.3|1.2|2.2|2.3|1.3|2.3|3.3|&lt;/matrix&gt;<br/>&lt;/stmml&gt;</div>
     </xsd:documentation>
   </xsd:annotation>

   <xsd:complexType><xsd:simpleContent>
         <xsd:extension base="xsd:string">
            <xsd:attribute name="dataType" type="dataTypeType" use="required" id="att.matrix.dataType"/>
            <xsd:attribute name="delimiter" type="delimiterType" id="att.matrix.delimiter"/>
            <xsd:attribute name="rows" type="sizeType" use="required">
               <xsd:annotation>
                  <xsd:documentation>
                     <div xmlns="" class="summary"><p>Number of rows</p>
                  </div>
                  </xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="columns" type="sizeType" use="required" id="att.matrix.columns">
               <xsd:annotation>
                  <xsd:documentation>
                    <div xmlns="" class="summary"><p>Number of columns</p>
                  </div>
                  </xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="units" type="unitsType" id="att.matrix.units">
               <xsd:annotation>
                  <xsd:documentation>
                    <div xmlns="" class="summary"><p>units (recommended for numeric quantities!!)</p>
                  </div>
                  </xsd:documentation>
               </xsd:annotation>
            </xsd:attribute>
            <xsd:attributeGroup ref="tit_id_conv_dictGroup"/>
            <xsd:attribute name="matrixType" type="matrixType" id="att.matrix.matrixType">
              <xsd:annotation>
                 <xsd:documentation>
                  <div xmlns="" class="summary">Type of matrix.</div>
                  <div xmlns="" class="description">Mainly square, but extensible through the <tt>xsd:union</tt> mechanism.
               </div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute>
           <xsd:attribute name="errorValues" type="floatArrayType" id="att.matrix.errorValues">
              <xsd:annotation>
                 <xsd:documentation>
                  <div xmlns="" class="summary">an optional array of error values for numeric matrices.</div>
                 </xsd:documentation>
              </xsd:annotation>
           </xsd:attribute>
           <xsd:attributeGroup ref="errorBasis"/>
           <xsd:attribute name="minValues" type="floatArrayType" id="att.matrix.minValues">
              <xsd:annotation>
                 <xsd:documentation>
                  <div xmlns="" class="summary">an optional array of minimum values for numeric matrices.</div>
                 </xsd:documentation>
              </xsd:annotation>
           </xsd:attribute>
           <xsd:attribute name="maxValues" type="floatArrayType" id="att.matrix.maxValues">
              <xsd:annotation>
                 <xsd:documentation>
                  <div xmlns="" class="summary">an optional array of maximum values for numeric matrices.</div>
                 </xsd:documentation>
              </xsd:annotation>
           </xsd:attribute>

         </xsd:extension>
      </xsd:simpleContent></xsd:complexType>
</xsd:element><xsd:element name="metadata" id="el.metadata">
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A general container for metadata.
      </div>
      <div xmlns="" class="description"><p>A general container for metadata, including at least
      Dublin Core (DC) and CML-specific metadata</p>
      <p>In its simple form each element provides a name and content in a similar
      fashion to the <tt>meta</tt> element in HTML. <tt>metadata</tt> may have simpleContent
      (i.e. a string for adding further information - this is not controlled).</p>
    </div>
      <div xmlns="" class="example" href="stmml/examples/metadata1.xml">&lt;stmml title="metadata example"&gt;<br/><br/>&lt;list&gt;<br/>  &lt;metadataList&gt;<br/>    &lt;metadata name="dc:coverage" content="Europe"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:description" content="Ornithological chemistry"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:identifier" content="ISBN:1234-5678"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:format" content="printed"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:relation" content="abc:def123"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:rights" content="licence:GPL"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:subject" content="Informatics"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:title" content="birds"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:type" content="bird books on chemistry"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:contributor" content="Tux Penguin"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:creator" content="author"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:publisher" content="Penguinone publishing"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:source" content="penguinPub"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:language" content="en-GB"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:date" content="1752-09-10"&gt;&lt;/metadata&gt;<br/>  &lt;/metadataList&gt;<br/>  &lt;metadataList&gt;<br/>    &lt;metadata name="cmlm:safety" content="mostly harmless"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="cmlm:insilico" content="electronically produced"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="cmlm:structure" content="penguinone"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="cmlm:reaction" content="synthesis of penguinone"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="cmlm:identifier" content="smiles:O=C1C=C(C)C(C)(C)C(C)=C1"&gt;&lt;/metadata&gt;<br/>  &lt;/metadataList&gt;<br/>  &lt;metadataList&gt;<br/>    &lt;metadata name="foo:institution" content="abc.org"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="bar" content="xyzzy"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="$deliberateError" content="error"&gt;&lt;/metadata&gt;<br/>  &lt;/metadataList&gt;<br/>&lt;/list&gt;<br/>&lt;/stmml&gt;</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType><xsd:simpleContent>
      <xsd:extension base="xsd:string">
        <xsd:attribute name="name" type="metadataType" id="att.metadata.name">
          <xsd:annotation>
            <xsd:documentation>
              <div xmlns="" class="summary">The metadata type.</div>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attributeGroup ref="convention"/>
        <xsd:attribute name="content" type="xsd:string" id="att.metadata.content">
          <xsd:annotation>
            <xsd:documentation>
              <div xmlns="" class="summary">The metadata.</div>
             </xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:simpleContent></xsd:complexType>
</xsd:element><xsd:element name="metadataList" id="el.metadataList">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A general container for metadata elements.
        </div>
        <div xmlns="" class="example" href="stmml/examples/metadata1.xml">&lt;stmml title="metadata example"&gt;<br/><br/>&lt;list&gt;<br/>  &lt;metadataList&gt;<br/>    &lt;metadata name="dc:coverage" content="Europe"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:description" content="Ornithological chemistry"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:identifier" content="ISBN:1234-5678"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:format" content="printed"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:relation" content="abc:def123"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:rights" content="licence:GPL"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:subject" content="Informatics"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:title" content="birds"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:type" content="bird books on chemistry"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:contributor" content="Tux Penguin"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:creator" content="author"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:publisher" content="Penguinone publishing"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:source" content="penguinPub"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:language" content="en-GB"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="dc:date" content="1752-09-10"&gt;&lt;/metadata&gt;<br/>  &lt;/metadataList&gt;<br/>  &lt;metadataList&gt;<br/>    &lt;metadata name="cmlm:safety" content="mostly harmless"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="cmlm:insilico" content="electronically produced"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="cmlm:structure" content="penguinone"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="cmlm:reaction" content="synthesis of penguinone"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="cmlm:identifier" content="smiles:O=C1C=C(C)C(C)(C)C(C)=C1"&gt;&lt;/metadata&gt;<br/>  &lt;/metadataList&gt;<br/>  &lt;metadataList&gt;<br/>    &lt;metadata name="foo:institution" content="abc.org"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="bar" content="xyzzy"&gt;&lt;/metadata&gt;<br/>    &lt;metadata name="$deliberateError" content="error"&gt;&lt;/metadata&gt;<br/>  &lt;/metadataList&gt;<br/>&lt;/list&gt;<br/>&lt;/stmml&gt;</div>
      </xsd:documentation>
    </xsd:annotation>

    <xsd:complexType><xsd:sequence><xsd:element ref="metadata" maxOccurs="unbounded"/></xsd:sequence></xsd:complexType>
  </xsd:element><xsd:element name="observation" id="el.observation">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">An observation or occurrence.
        </div>
        <div xmlns="" class="description"><p>A container for any events that
        need to be recorded, whether planned or not. They can include notes,
        measurements, conditions that may be referenced elsewhere, etc. There are
        no controlled semantics </p>
        <div class="example" href="stmml/examples/observation1.xml">&lt;stmml title="observation example"&gt;<br/>&lt;observation type="ornithology"&gt;<br/>  &lt;object title="sparrow" count="3"&gt;&lt;/object&gt;<br/>  &lt;observ&gt;&lt;/observ&gt;<br/>&lt;/observation&gt;<br/>&lt;/stmml&gt;</div>
      </div>
     </xsd:documentation>
   </xsd:annotation>
    <xsd:complexType mixed="true"><xsd:sequence minOccurs="0" maxOccurs="unbounded"><xsd:any processContents="lax"/></xsd:sequence><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attribute name="type" type="xsd:string" id="att.observation.type">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">Type of observation (uncontrolled vocabulary).</div>
         </xsd:documentation>
       </xsd:annotation>
      </xsd:attribute><xsd:attribute name="count" type="countType" id="att.observation.count"/></xsd:complexType>

  </xsd:element><xsd:element name="scalar" id="el.scalar">  
   <xsd:annotation>
     <xsd:documentation>
       <div xmlns="" class="summary">An element to hold scalar data. 
       </div>
         <div xmlns="" class="description">
           <p><tt>scalar</tt> holds scalar data under a single
            generic container. The semantics are usually resolved by
            linking to a dictionary.
             <b>scalar</b> defaults to a scalar string but
             has attributes which affect the type.
         </p>
         <p><tt>scalar</tt> does not necessarily reflect a physical object (for which
         <a href="el.object">object</a> should be used). It may reflect a property of an object
         such as temperature, size, etc. </p>
         <p>Note that normal Schema validation tools cannot validate the data type 
         of <b>scalar</b> (it is defined as <tt>string</tt>), but that a temporary schema 
         can be constructed from the type and used for validation. Also the type
         can be contained in a dictionary and software could decide to retrieve this
         and use it for validation.</p>
      </div>

      <div xmlns="" class="example" href="stmml/examples/scalar1.xml">&lt;stmml title="scalar example"&gt;<br/>&lt;scalar dataType="xsd:decimal" errorValue="1.0" errorBasis="observedStandardDeviation" title="body weight" dictRef="zoo:bodywt" units="units:g"&gt;34.3&lt;/scalar&gt;<br/>&lt;/stmml&gt;</div>
     </xsd:documentation>
   </xsd:annotation>
   <xsd:complexType><xsd:simpleContent>
         <xsd:extension base="xsd:string">
            <xsd:attributeGroup ref="tit_id_conv_dictGroup"/>
            <xsd:attributeGroup ref="dataType"/>
            <xsd:attributeGroup ref="errorValue"/>
            <xsd:attributeGroup ref="errorBasis"/>
            <xsd:attributeGroup ref="min"/>
            <xsd:attributeGroup ref="max"/>
            <xsd:attributeGroup ref="units"/>
         </xsd:extension>
      </xsd:simpleContent></xsd:complexType>
</xsd:element><xsd:simpleType name="coordinateComponentArrayType" id="st.coordinateComponentArrayType">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">An array of coordinateComponents for a single coordinate.</div>
      <div xmlns="" class="description">
        <p>An array of coordinateComponents for a single coordinate
         where these all refer to an X-coordinate (NOT x,y,z) 
	Instances of this type will
      be used in array-style representation of 2-D or 3-D coordinates.</p>
      <p>Currently no machine validation</p>
      <p>Currently not used in STMML, but re-used by CML (see example)</p>
      </div>
      <div xmlns="" class="example" href="stmml/examples/coordinateComponentArrayType1.xml">&lt;stmml title="coordinateComponentArrayType"&gt;<br/><br/>&lt;cml:atomArray x2="1.2 2.3 4.5 6.7"&gt;&lt;/cml:atomArray&gt;<br/>&lt;/stmml&gt;</div>
     </xsd:documentation>
   </xsd:annotation>
   <xsd:list itemType="xsd:float"/>
</xsd:simpleType><xsd:simpleType name="coordinate2Type" id="st.coordinate2Type">  
   <xsd:annotation>
     <xsd:documentation>
        <div xmlns="" class="summary">An x/y coordinate pair.</div>
         <div xmlns="" class="description">
         <p>An x/y coordinate pair consisting of 
         two real numbers, separated by whitespace or a comma.
         In arrays and matrices, it may be useful to set a separate delimiter</p> 
      </div>
      <div xmlns="" class="example" href="stmml/examples/coordinate2Type1.xml">&lt;stmml title="coordinate2Type example"&gt;<br/>&lt;list&gt;<br/>  &lt;array dataType="xsd:decimal"&gt;1.2,3.4   3.2,4.5   6.7,23.1 &lt;/array&gt;<br/>  &lt;array delimiter="/" dataType="xsd:decimal"&gt;/1.2 3.4/3.2 4.5/6.7 23.1/&lt;/array&gt;<br/>&lt;/list&gt;<br/>&lt;/stmml&gt;</div>
     </xsd:documentation>
   </xsd:annotation>
   <xsd:restriction base="xsd:string">
      <xsd:pattern value="\s*([\-]|[+])?\d*\.?\d*(\s+|[,])([\-]|[+])?\d*\.?\d*\s*"/>
   </xsd:restriction>
</xsd:simpleType><xsd:simpleType name="coordinate3Type" id="st.coordinate3Type">  
      <xsd:annotation>
        <xsd:documentation>
          <div xmlns="" class="summary">An x/y/z coordinate triple.</div>

          <div xmlns="" class="description">
            <p>An x/y/z coordinate triple consisting of 
            three real numbers, separated by whitespace or commas.
            In arrays and matrices, it may be useful to set a separate delimiter</p> 
         </div>

         <div xmlns="" class="example" href="stmml/examples/coordinate3Type1.xml">&lt;stmml title="coordinate3Type example"&gt;<br/>&lt;list&gt;<br/>  &lt;array dataType="xsd:decimal"&gt;1.2,3.4,1.2   <br/>    3.2,4.5,7.3   6.7,23.1,5.6 &lt;/array&gt;<br/>  &lt;array delimiter="/" dataType="xsd:decimal"&gt;/1.2 3.4 3.3/3.2 4.5 4.5/6.7 23.1 5.6/&lt;/array&gt;<br/>&lt;/list&gt;<br/>&lt;/stmml&gt;</div>
        </xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:string">
         <xsd:pattern value="\s*([\-]|[+])?\d*\.?\d*(\s+|[,])([\-]|[+])?\d*\.?\d*(\s+|[,])([\-]|[+])?\d*\.?\d*\s*"/>
      </xsd:restriction>
   </xsd:simpleType><xsd:simpleType name="countType" id="st.countType">
      <xsd:annotation>
        <xsd:documentation>
           <div xmlns="" class="summary">
            <p>A count multiplier for an element</p>
         </div>

          <div xmlns="" class="description">
            <p>Many elements represent objects which can occur an arbitrary number of times in a scientific context.
            Examples are
            <tt>action</tt>, <tt>object</tt> or <tt>molecule</tt>s.</p>
         </div>

         <div xmlns="" class="example" href="stmml/examples/countType1.xml">&lt;stmml title="countType example"&gt;<br/><br/>&lt;list&gt;<br/>&lt;object title="frog" count="10"&gt;&lt;/object&gt;<br/>&lt;action title="step3" count="3"&gt;<br/>  &lt;p&gt;Add 10 ml reagent&lt;/p&gt;<br/>&lt;/action&gt;<br/>&lt;/list&gt;<br/>&lt;/stmml&gt;</div>
        </xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:nonNegativeInteger">
      </xsd:restriction>
   </xsd:simpleType><xsd:simpleType name="dataTypeType" id="st.dataTypeType">  
      <xsd:annotation>
        <xsd:documentation>
          <div xmlns="" class="summary">
           <p>an enumerated type for all builtin allowed dataTypes in STM</p>
         </div>

         <div xmlns="" class="description">
            <p>
               <tt>dataTypeType</tt> represents an enumeration of allowed dataTypes
               (at present identical with those in XML-Schemas (Part2- datatypes).
               This means that implementers should be able to use standard XMLSchema-based
               tools for validation without major implementation problems.
            </p>
            <p>It will often be used an an attribute on 
            <a href="el.scalar">scalar</a>,
            <a href="el.array">array</a> or
            <a href="el.matrix">matrix</a> 
            elements.</p>
         </div>

         <div xmlns="" class="example" href="stmml/examples/dataTypeType1.xml">&lt;stmml title="dataType example"&gt;<br/><br/>&lt;list&gt;<br/>  &lt;scalar dataType="xsd:boolean" title="she loves me"&gt;true&lt;/scalar&gt;<br/>  &lt;scalar dataType="xsd:float" title="x"&gt;23.2&lt;/scalar&gt;<br/>  &lt;scalar dataType="xsd:duration" title="egg timer"&gt;PM4&lt;/scalar&gt;<br/>  &lt;scalar dataType="xsd:dateTime" title="current data and time"&gt;2001-02-01:00:30&lt;/scalar&gt;<br/>  &lt;scalar dataType="xsd:time" title="wake up"&gt;06:00&lt;/scalar&gt;<br/>  &lt;scalar dataType="xsd:date" title="where is it"&gt;1752-09-10&lt;/scalar&gt;<br/>  &lt;scalar dataType="xsd:anyURI" title="CML site"&gt;http://www.xml-cml.org/&lt;/scalar&gt;<br/>  &lt;scalar dataType="xsd:QName" title="CML atom"&gt;cml:atom&lt;/scalar&gt;<br/>  &lt;scalar dataType="xsd:normalizedString" title="song"&gt;the mouse ran up the clock&lt;/scalar&gt;<br/>  &lt;scalar dataType="xsd:language" title="UK English"&gt;en-GB&lt;/scalar&gt;<br/>  &lt;scalar dataType="xsd:Name" title="atom"&gt;atom&lt;/scalar&gt;<br/>  &lt;scalar dataType="xsd:ID" title="XML ID"&gt;_123&lt;/scalar&gt;<br/>  &lt;scalar dataType="xsd:integer" title="the answer"&gt;42&lt;/scalar&gt;<br/>  &lt;scalar dataType="xsd:nonPositiveInteger" title="zero"&gt;0&lt;/scalar&gt;<br/>&lt;/list&gt;<br/>&lt;/stmml&gt;</div>
        </xsd:documentation>
      </xsd:annotation>
  <xsd:union>
    <xsd:simpleType>
      <xsd:restriction base="xsd:string">
        <xsd:enumeration value="xsd:string"/>
       <xsd:enumeration value="xsd:boolean"/>
       <xsd:enumeration value="xsd:float"/>
       <xsd:enumeration value="xsd:double"/>
       <xsd:enumeration value="xsd:decimal"/>
       <xsd:enumeration value="xsd:duration"/>
       <xsd:enumeration value="xsd:dateTime"/>
       <xsd:enumeration value="xsd:time"/>
       <xsd:enumeration value="xsd:date"/>
       <xsd:enumeration value="xsd:gYearMonth"/>
       <xsd:enumeration value="xsd:gYear"/>
       <xsd:enumeration value="xsd:gMonthDay"/>
       <xsd:enumeration value="xsd:gDay"/>
       <xsd:enumeration value="xsd:gMonth"/>
       <xsd:enumeration value="xsd:hexBinary"/>
       <xsd:enumeration value="xsd:base64Binary"/>
       <xsd:enumeration value="xsd:anyURI"/>
       <xsd:enumeration value="xsd:QName"/>
       <xsd:enumeration value="xsd:NOTATION"/>
       <xsd:enumeration value="xsd:normalizedString"/>
       <xsd:enumeration value="xsd:token"/>
       <xsd:enumeration value="xsd:language"/>
       <xsd:enumeration value="xsd:IDREFS"/>
       <xsd:enumeration value="xsd:ENTITIES"/>
       <xsd:enumeration value="xsd:NMTOKEN"/>
       <xsd:enumeration value="xsd:NMTOKENS"/>
       <xsd:enumeration value="xsd:Name"/>
       <xsd:enumeration value="xsd:NCName"/>
       <xsd:enumeration value="xsd:ID"/>
       <xsd:enumeration value="xsd:IDREF"/>
       <xsd:enumeration value="xsd:ENTITY"/>
       <xsd:enumeration value="xsd:integer"/>
       <xsd:enumeration value="xsd:nonPositiveInteger"/>
       <xsd:enumeration value="xsd:negativeInteger"/>
       <xsd:enumeration value="xsd:long"/>
       <xsd:enumeration value="xsd:int"/>
       <xsd:enumeration value="xsd:short"/>
       <xsd:enumeration value="xsd:byte"/>
       <xsd:enumeration value="xsd:nonNegativeInteger"/>
       <xsd:enumeration value="xsd:unsignedLong"/>
       <xsd:enumeration value="xsd:unsignedInt"/>
       <xsd:enumeration value="xsd:unsignedShort"/>
       <xsd:enumeration value="xsd:unsignedByte"/>
       <xsd:enumeration value="xsd:positiveInteger"/>
     </xsd:restriction>
   </xsd:simpleType>
   <xsd:simpleType>
     <xsd:restriction base="xsd:QName">
     </xsd:restriction>
    </xsd:simpleType>
  </xsd:union>
</xsd:simpleType><xsd:simpleType name="delimiterType" id="st.delimiterType">
   <xsd:annotation>
     <xsd:documentation>
       <div xmlns="" class="summary">A non-whitespace character used in arrays to separate components.</div>
      <div xmlns="" class="description">
        <p>Some STMML elements (such as <a href="el.array">array</a>) have
        content representing concatenated values. The default separator is
        whitespace (which can be normalised) and this should be used whenever
        possible. However in some cases the values are empty, or contain whitespace or other
        problematic punctuation, and a delimiter is required.</p>
        <p>Note that the content string MUST start and end with the delimiter so
        there is no ambiguity as to what the components are. Only printable
        characters from the ASCII character set should be used, and character
        entities should be avoided.</p>
        <p>When delimiters are used to separate precise whitespace this should always
        consist of spaces and not the other allowed whitespace characters 
        (newline, tabs, etc.). If the latter are important it is probably best to redesign
        the application.</p>
      </div>
      <div xmlns="" class="example" href="stmml/examples/delimiterType1.xml">&lt;stmml title="delimiter example"&gt;<br/><br/>&lt;array size="4" dataType="xsd:string" delimiter="|"&gt;|A|B12||D and   E|&lt;/array&gt;<br/>&lt;/stmml&gt;

 <em>The values in the array are</em>
  "A", "B12", "" (empty string) and "D and   E" 
 <em>note the spaces</em>
      </div>
     </xsd:documentation>
   </xsd:annotation>
   <xsd:restriction base="xsd:string">
   </xsd:restriction>
</xsd:simpleType><xsd:simpleType name="errorBasisType" id="st.errorBasisType">
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">The basis of an error value.</div>
      <div xmlns="" class="description">
        <p>Errors in values can be of several types and this simpleType
         provides a small controlled vocabulary</p>
      </div>

      <div xmlns="" class="example" href="stmml/examples/scalar1.xml">&lt;stmml title="scalar example"&gt;<br/>&lt;scalar dataType="xsd:decimal" errorValue="1.0" errorBasis="observedStandardDeviation" title="body weight" dictRef="zoo:bodywt" units="units:g"&gt;34.3&lt;/scalar&gt;<br/>&lt;/stmml&gt;</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="xsd:string">
    <xsd:enumeration value="observedRange"/>
    <xsd:enumeration value="observedStandardDeviation"/>
    <xsd:enumeration value="observedStandardError"/>
    <xsd:enumeration value="estimatedStandardDeviation"/>
    <xsd:enumeration value="estimatedStandardError"/>
  </xsd:restriction>
</xsd:simpleType><xsd:simpleType name="errorValueType" id="st.errorValueType">
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">An observed or calculated estimate of the error in the value of a numeric quantity.</div>
      <div xmlns="" class="description">
        <p>An observed or calculated estimate of the error in the value of a numeric quantity.
.        It should be ignored for dataTypes such as URL, date or string. 
         The statistical basis of the <tt>errorValueType</tt> is not defined - it could be a range,
         an estimated standard deviation, an observed standard error, etc. This information can 
         be added through <a href="at.errorBasisType">errorBasisType</a>.</p>
      </div>
      <div xmlns="" class="example" href="stmml/examples/scalar1.xml">&lt;stmml title="scalar example"&gt;<br/>&lt;scalar dataType="xsd:decimal" errorValue="1.0" errorBasis="observedStandardDeviation" title="body weight" dictRef="zoo:bodywt" units="units:g"&gt;34.3&lt;/scalar&gt;<br/>&lt;/stmml&gt;</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="xsd:float"/>
</xsd:simpleType><xsd:simpleType name="idType" id="st.idType">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A unique ID for an element.</div>
      <div xmlns="" class="description">          
      <p>This is not formally
          of type ID (an XML NAME which must start with a letter and contain only letters,
          digits and <tt>.-_:</tt>). It is recommended that IDs start with a letter,
          and contain no punctuation or whitespace. The function <tt>generate-id()</tt>
          in XSLT will generate semantically void unique IDs.</p>
          <p>It is difficult to ensure uniqueness when documents are merged. We suggest
          namespacing IDs, perhaps using the containing elements as the base.
          Thus <tt>mol3:a1</tt> could be a useful unique ID. 
          However this is still experimental.</p>
         </div>
      </xsd:documentation>
     </xsd:annotation>
   <xsd:restriction base="xsd:string">
     <xsd:pattern value="([A-Za-z][A-Za-z0-9_-]*:)?[A-Za-z][A-Za-z0-9_\-\.]*"/>
   </xsd:restriction>
</xsd:simpleType><xsd:simpleType name="floatArrayType" id="st.floatArrayType">  
     <xsd:annotation>
       <xsd:documentation>
         <div xmlns="" class="summary">An array of floats.</div>

         <div xmlns="" class="description">
            <p>An array of floats or other real numbers. 
            Not used in STM Schema, but re-used by CML and other languages.
            </p> 
         </div>

        <div xmlns="" class="example" href="stmml/examples/floatArrayType1.xml">&lt;atomArray x2="1.2 2.3 3.4 5.6"&gt;&lt;/atomArray&gt;</div>
        </xsd:documentation>
      </xsd:annotation>
      <xsd:list itemType="xsd:float"/>
   </xsd:simpleType><xsd:simpleType name="integerArrayType" id="st.integerArrayType">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">An array of integers.</div>
      <div xmlns="" class="description">
        <p>An array of integers; for re-use by other schemas</p> 
        <p>Not machine-validatable</p>
      </div>
      <div xmlns="" class="example" href="stmml/examples/integerArrayType1.xml">&lt;stmml title="integerArray type"&gt;<br/><br/>&lt;atomArray hydrogenCount="3 1 0 2"&gt;&lt;/atomArray&gt;<br/>&lt;/stmml&gt;</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:list itemType="xsd:integer"/>
</xsd:simpleType><xsd:simpleType name="maxType" id="st.maxType">
    <xsd:annotation>
       <xsd:documentation>
          <div xmlns="" class="summary">The maximum INCLUSIVE value of a quantity.</div>
          <div xmlns="" class="description"><p>The maximum INCLUSIVE value of a sortable quantity such as
          numeric, date or string. It should be ignored for dataTypes such as URL. 
          The use of <tt>min</tt> and
        <tt>max</tt> attributes can be used to give a range for the quantity.
       The statistical basis of this range is not defined. The value of <tt>max</tt> 
       is usually an observed 
       quantity (or calculated from observations). To restrict a value, the <tt>
       maxExclusive</tt> type in a dictionary should be used.</p>
       <p>The type of the maximum is the same as the quantity to which it refers - numeric,
       date and string are currently allowed</p>
       </div>
       <div xmlns="" class="example" href="stmml/examples/maxType1.xml">&lt;stmml title="maxType example"&gt;<br/><br/>&lt;scalar dataType="xsd:float" max="20" min="12"&gt;15&lt;/scalar&gt;<br/>&lt;/stmml&gt;</div>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
    </xsd:restriction>
 </xsd:simpleType><xsd:simpleType name="matrixType" id="st.matrixType">   
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">Allowed <a href="el.matrix">matrix</a> types.</div>
       <div xmlns="" class="description"><p>Allowed <tt>matrix</tt> types.
       These are mainly square matrices</p></div>
      <div xmlns="" class="example" href="stmml/examples/matrix1.xml">&lt;stmml title="matrix example"&gt;<br/><br/>&lt;matrix id="m1" title="matrix-1" dictRef="foo:bar" rows="3" columns="3" dataType="xsd:decimal" delimiter="|" matrixType="squareSymmetric" units="unit:m"&gt;|1.1|1.2|1.3|1.2|2.2|2.3|1.3|2.3|3.3|&lt;/matrix&gt;<br/>&lt;/stmml&gt;</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:union>
  <xsd:simpleType>
  <xsd:restriction base="xsd:string">
      <xsd:enumeration value="rectangular"/>
      <xsd:enumeration value="square"/>
      <xsd:enumeration value="squareSymmetric"/>
      <xsd:enumeration value="squareAntisymmetric"/>
      <xsd:enumeration value="diagonal">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="description">Symmetric. Elements are zero except on the diagonal.</div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="upperTriangular">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="description">Square. Elements are zero below the diagonal
            <pre>
1 2 3 4
0 3 5 6
0 0 4 8
0 0 0 2
      </pre>
            </div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="lowerTriangular">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="description">Symmetric. Elements are zero except on the diagonal.</div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="unitary"/>
      <xsd:enumeration value="rowEigenvectors"/>
      <xsd:enumeration value="rotation22"/>
      <xsd:enumeration value="rotationTranslation32"/>
      <xsd:enumeration value="homogeneous33"/>
      <xsd:enumeration value="rotation33"/>
      <xsd:enumeration value="rotationTranslation43"/>
      <xsd:enumeration value="homogeneous44"/>
      <xsd:enumeration value="square"/>
   </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType>
    <xsd:restriction base="namespaceRefType">
      <xsd:annotation>
        <xsd:documentation>
          <div xmlns="" class="summary">User-defined matrix-type.</div>
          <div xmlns="" class="description">This definition must be by reference to a namespaced dictionary entry.</div>
        </xsd:documentation>
     </xsd:annotation>
    </xsd:restriction>
  </xsd:simpleType>
  </xsd:union>
</xsd:simpleType><xsd:simpleType name="metadataType" id="md.metadataType">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">The name of the metadata.</div>
            <div xmlns="" class="description">Metadata consists of name-value pairs (value is in the "content" attribute). The names are from a semi-restricted vocabulary, mainly Dublin Core. The content is unrestricted. The order of metadata has no implied semantics at present. Users can create their own metadata names using the namespaced prefix syntax (e.g. foo:institution). Ideally these names should be defined in an STMML dictionary.
            </div>
            <div xmlns="" class="curation">2003-03-05: Added UNION to manage non-controlled names</div>
          </xsd:documentation>
        </xsd:annotation>
    <xsd:union>
      <xsd:simpleType>
        <xsd:restriction base="xsd:string">
      <xsd:enumeration value="dc:coverage">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">The extent or scope of the
            content of the resource.</div>

            <div xmlns="" class="description">Coverage will typically include
            spatial location (a place name or geographic
            coordinates), temporal period (a period label, date, or
            date range) or jurisdiction (such as a named
            administrative entity). Recommended best practice is to
            select a value from a controlled vocabulary (for
            example, the Thesaurus of Geographic Names [TGN]) and
            that, where appropriate, named places or time periods
            be used in preference to numeric identifiers such as
            sets of coordinates or date ranges.
            </div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="dc:description">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">An account of the content of the
            resource.</div>

            <div xmlns="" class="description">Description may include but is not
            limited to: an abstract, table of contents, reference
            to a graphical representation of content or a free-text
            account of the content.
          </div>
</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="dc:identifier">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">An unambiguous reference to the
            resource within a given context.</div>

            <div xmlns="" class="description">Recommended best practice is to
            identify the resource by means of a string or number
            conforming to a formal identification system. Example
            formal identification systems include the Uniform
            Resource Identifier (URI) (including the Uniform
            Resource Locator (URL)), the Digital Object Identifier
            (DOI) and the International Standard Book Number
            (ISBN).
          </div>
</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="dc:format">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">The physical or digital
            manifestation of the resource.</div>

            <div xmlns="" class="description">Typically, Format may include the
            media-type or dimensions of the resource. Format may be
            used to determine the software, hardware or other
            equipment needed to display or operate the resource.
            Examples of dimensions include size and duration.
            Recommended best practice is to select a value from a
            controlled vocabulary (for example, the list of
            Internet Media Types [MIME] defining computer media
            formats).
          </div>
</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="dc:relation">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">A reference to a related
            resource.</div>

            <div xmlns="" class="description">Recommended best practice is to
            reference the resource by means of a string or number
            conforming to a formal identification system.
          </div>
</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="dc:rights">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">Information about rights held in
            and over the resource.</div>

            <div xmlns="" class="description">Typically, a Rights element will
            contain a rights management statement for the resource,
            or reference a service providing such information.
            Rights information often encompasses Intellectual
            Property Rights (IPR), Copyright, and various Property
            Rights. If the Rights element is absent, no assumptions
            can be made about the status of these and other rights
            with respect to the resource.
          </div>
</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="dc:subject">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">The topic of the content of the
            resource.</div>

            <div xmlns="" class="description">Typically, a Subject will be
            expressed as keywords, key phrases or classification
            codes that describe a topic of the resource.
            Recommended best practice is to select a value from a
            controlled vocabulary or formal classification
            scheme.
          </div>
</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="dc:title">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">A name given to the resource.</div>

            <div xmlns="" class="description">Typically, a Title will be a name by
            which the resource is formally known.
          </div>
         </xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="dc:type">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">The nature or genre of the
            content of the resource.</div>

            <div xmlns="" class="description">Type includes terms describing
            general categories, functions, genres, or aggregation
            levels for content. Recommended best practice is to
            select a value from a controlled vocabulary (for
            example, the working draft list of Dublin Core Types
            [DCT1]). To describe the physical or digital
            manifestation of the resource, use the FORMAT
            element.
          </div>
         </xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="dc:contributor">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">An entity responsible for making
            contributions to the content of the resource.</div>

            <div xmlns="" class="description">Examples of a Contributor include a
            person, an organisation, or a service. Typically, the
            name of a Contributor should be used to indicate the
            entity.
          </div>
         </xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="dc:creator">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">An entity primarily responsible
            for making the content of the resource.</div>

            <div xmlns="" class="description">Examples of a Creator include a
            person, an organisation, or a service. Typically, the
            name of a Creator should be used to indicate the
            entity.
          </div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="dc:publisher">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">An entity responsible for making
            the resource available.</div>

            <div xmlns="" class="description">Examples of a Publisher include a
            person, an organisation, or a service. Typically, the
            name of a Publisher should be used to indicate the
            entity.
          </div>
         </xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="dc:source">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">A Reference to a resource from
            which the present resource is derived.</div>

            <div xmlns="" class="description">The present resource may be derived
            from the Source resource in whole or in part.
            Recommended best practice is to reference the resource
            by means of a string or number conforming to a formal
            identification system.
          </div>
</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="dc:language">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">A language of the intellectual
            content of the resource.</div>

            <div xmlns="" class="description">Recommended best practice for the
            values of the Language element is defined by RFC 1766
            [RFC1766] which includes a two-letter Language Code
            (taken from the ISO 639 standard [ISO639]), followed
            optionally, by a two-letter Country Code (taken from
            the ISO 3166 standard [ISO3166]). For example, 'en' for
            English, 'fr' for French, or 'en-uk' for English used
            in the United Kingdom.
          </div>
</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="dc:date">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">A date associated with an event
            in the life cycle of the resource.</div>

            <div xmlns="" class="description">Typically, Date will be associated
            with the creation or availability of the resource.
            Recommended best practice for encoding the date value
            is defined in a profile of ISO 8601 [W3CDTF] and
            follows the YYYY-MM-DD format.
          </div>
</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="cmlm:safety">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">Entry contains information
            relating to chemical safety.</div>

            <div xmlns="" class="description">Typically the content will be a
            reference to a handbook, MSDS, threshhold or other
            human-readable string
          </div>
</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="cmlm:insilico">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">Part or whole of the information
            was computer-generated.</div>
            <div xmlns="" class="description">Typically the content will be the
            name of a method or a program
          </div>
</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="cmlm:structure">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="definition">3D structure included.</div>
            <div xmlns="" class="description">details included
          </div>
</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>

      <xsd:enumeration value="cmlm:reaction">
      </xsd:enumeration>

      <xsd:enumeration value="cmlm:identifier">
      </xsd:enumeration>

      <xsd:enumeration value="other">
      </xsd:enumeration>
    </xsd:restriction>
   </xsd:simpleType>  
   <xsd:simpleType>
     <xsd:restriction base="namespaceRefType"/>
   </xsd:simpleType>
 </xsd:union>
</xsd:simpleType><xsd:simpleType name="minType" id="st.minType">
      <xsd:annotation>
         <xsd:documentation>
            <div xmlns="" class="summary">The minimum INCLUSIVE value of a quantity.</div>
            <div xmlns="" class="description"><p>The minimum INCLUSIVE value of a sortable quantity such as
            numeric, date or string. It should be ignored for dataTypes such as URL. 
            The use of <tt>min</tt> and
          <tt>min</tt> attributes can be used to give a range for the quantity.
         The statistical basis of this range is not defined. The value of <tt>min</tt> 
         is usually an observed 
         quantity (or calculated from observations). To restrict a value, the <tt>
         minExclusive</tt> type in a dictionary should be used.</p>
         <p>The type of the minimum is the same as the quantity to which it refers - numeric,
         date and string are currently allowed</p>
         </div>
          <div xmlns="" class="example" href="stmml/examples/maxType1.xml">&lt;stmml title="maxType example"&gt;<br/><br/>&lt;scalar dataType="xsd:float" max="20" min="12"&gt;15&lt;/scalar&gt;<br/>&lt;/stmml&gt;</div>
        </xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:string">
      </xsd:restriction>
   </xsd:simpleType><xsd:simpleType name="namespaceRefType" id="st.namespaceRefType">
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">
         A string referencing a dictionary, units, convention or other metadata.
      </div>
        <div xmlns="" class="description">
         <p>The namespace is optional but recommended where possible</p> 
      <p>Note: this convention is only used within STMML and related languages;
      it is NOT a generic URI.</p>
      </div>
        <div xmlns="" class="example" href="stmml/examples/namespaceRefType1.xml">&lt;stmml title="namespace example"&gt;<br/><br/>&lt;list&gt;<br/><br/>  &lt;scalar dictRef="chem:mpt"&gt;123&lt;/scalar&gt;  <br/><br/>  &lt;scalar dictRef="mpt23"&gt;123&lt;/scalar&gt;  <br/>&lt;/list&gt;<br/>&lt;/stmml&gt;</div>
     </xsd:documentation>
   </xsd:annotation>
   <xsd:restriction base="xsd:string">
     <xsd:annotation>
       <xsd:documentation>
         <div xmlns="" class="description">
         <p>The namespace prefix must start with an alpha character and can only contain alphanumeric and '_'. The suffix can have characters from the XML ID specification (alphanumeric, '_', '.' and '-'</p>
      </div>
     </xsd:documentation>
   </xsd:annotation>
      <xsd:pattern value="([A-Za-z][A-Za-z0-9_]*:)?[A-Za-z][A-Za-z0-9_\.\-]*"/>
   </xsd:restriction>
</xsd:simpleType><xsd:simpleType name="positiveNumberType" id="st.positiveNumberType">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="description">A positive number. Note that we also provide nonNegativeNumber 
      with inclusive zero. The maximum number is (quite large) since 'unbounded' is more difficult 
      to implement.  This is greater than Eddington's estimate of the number of particles in the
      universe so it should work for most people.</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="xsd:double">
    <xsd:minExclusive value="0.0"/>
    <xsd:maxInclusive value="1.0E+99"/>
  </xsd:restriction>
</xsd:simpleType><xsd:simpleType name="refType" id="st.refType">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A reference to an existing element.</div>
      <div xmlns="" class="description">
        <p>A reference to an existing element in the document.
           The target of the ref attribute must exist. The test for validity 
           will normally occur in the element's <tt>appinfo</tt>
        </p> 
        <p>Any DOM Node created from this element will normally be a <i>reference</i>
           to another Node, so that if the target node is modified a the dereferenced
           content is modified. At present there are no deep copy semantics hardcoded
           into the schema.
        </p>
      </div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="idType"/>
</xsd:simpleType><xsd:simpleType name="sizeType" id="st.sizeType">  
      <xsd:annotation>
         <xsd:documentation>
           <div xmlns="" class="summary">The size of an array.</div>
           <div xmlns="" class="description">
            <p>The size of an array. Redundant, but serves as a check
         for processing software (useful if delimiters are used)</p> 
         </div>
       </xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:nonNegativeInteger"/>
   </xsd:simpleType><xsd:simpleType name="unitsType" id="st.unitsType">
      <xsd:annotation>
         <xsd:documentation>
           <div xmlns="" class="summary">Scientific units.</div>
           <div xmlns="" class="description"><p>These will be linked to dictionaries of units with
         conversion information, using namespaced references (e.g. <tt>si:m</tt>)
          </p> 
          <p>Distinguish carefully from <a href="st.unitType">unitType</a>
          which is an element describing a type of a unit in a <a href="el.unitList">unitList</a> 
          </p></div>
           <div xmlns="" class="example" href="stmml/examples/unit2.xml">&lt;stmml title="unitList example"&gt;<br/>&lt;stm:unitList&gt;<br/><br/><br/><br/><br/><br/>&lt;stm:unitType id="length" name="length"&gt;<br/>  &lt;stm:dimension name="length" power="1"&gt;&lt;/stm:dimension&gt;<br/>&lt;/stm:unitType&gt;<br/><br/>&lt;stm:unitType id="time" name="time"&gt;<br/>  &lt;stm:dimension name="time" power="1"&gt;&lt;/stm:dimension&gt;<br/>&lt;/stm:unitType&gt;<br/><br/><br/><br/>&lt;stm:unitType id="dimensionless" name="dimensionless"&gt;<br/>  &lt;stm:dimension name="dimensionless" power="1"&gt;&lt;/stm:dimension&gt;<br/>&lt;/stm:unitType&gt;<br/><br/><br/><br/><br/><br/>&lt;stm:unitType id="acceleration" name="acceleration"&gt;<br/>  &lt;stm:dimension name="length" power="1"&gt;&lt;/stm:dimension&gt;<br/>  &lt;stm:dimension name="time" power="-2"&gt;&lt;/stm:dimension&gt;<br/>&lt;/stm:unitType&gt;<br/><br/><br/><br/><br/><br/><br/><br/>&lt;stm:unit id="second" name="second" unitType="time"&gt;<br/>  &lt;stm:description&gt;The SI unit of time&lt;/stm:description&gt;<br/>&lt;/stm:unit&gt;<br/><br/>&lt;stm:unit id="meter" name="meter" unitType="length" abbreviation="m"&gt;<br/>  &lt;stm:description&gt;The SI unit of length&lt;/stm:description&gt;<br/>&lt;/stm:unit&gt;<br/><br/><br/><br/>&lt;stm:unit id="kg" name="nameless" unitType="dimensionless" abbreviation="nodim"&gt;<br/>  &lt;stm:description&gt;A fictitious parent for dimensionless units&lt;/stm:description&gt;<br/>&lt;/stm:unit&gt;<br/><br/><br/><br/><br/><br/>&lt;stm:unit id="newton" name="newton" unitType="force"&gt;<br/>  &lt;stm:description&gt;The SI unit of force&lt;/stm:description&gt;<br/>&lt;/stm:unit&gt;<br/><br/><br/><br/><br/><br/>&lt;stm:unit id="g" name="gram" unitType="mass" parentSI="kg" multiplierToSI="0.001" abbreviation="g"&gt;<br/>  &lt;stm:description&gt;0.001 kg. &lt;/stm:description&gt;<br/>&lt;/stm:unit&gt;<br/><br/>&lt;stm:unit id="celsius" name="Celsius" parentSI="k" multiplierToSI="1" constantToSI="273.18"&gt;<br/>  &lt;stm:description&gt;&lt;p&gt;A common unit of temperature&lt;/p&gt;&lt;/stm:description&gt;<br/>&lt;/stm:unit&gt;<br/><br/><br/><br/>&lt;stm:unit id="inch" name="inch" parentSI="meter" abbreviation="in" multiplierToSI="0.0254"&gt;<br/>  &lt;stm:description&gt;An imperial measure of length&lt;/stm:description&gt;<br/>&lt;/stm:unit&gt;<br/><br/><br/><br/>&lt;stm:unit id="l" name="litre" unitType="volume" parentSI="meterCubed" abbreviation="l" multiplierToSI="0.001"&gt;<br/>  &lt;stm:description&gt;Nearly 1 dm**3 This is not quite exact&lt;/stm:description&gt;<br/>&lt;/stm:unit&gt;<br/><br/><br/><br/>&lt;stm:unit id="fahr" name="fahrenheit" parentSI="k" abbreviation="F" multiplierToSI="0.55555555555555555" constantToSI="-17.777777777777777777"&gt;<br/>  &lt;stm:description&gt;An obsolescent unit of temperature still used in popular<br/>  meteorology&lt;/stm:description&gt;<br/>&lt;/stm:unit&gt;<br/><br/>&lt;/stm:unitList&gt;<br/>&lt;/stmml&gt;</div>
        </xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:string"/>
   </xsd:simpleType><xsd:simpleType name="vector3Type" id="st.vector3Type">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">A vector in 3-space</div>
      <div xmlns="" class="summary">No constraints on magnitude (i.e. could be zero)</div>
      <div xmlns="" class="example" href="stmml/examples/vector31.xml">&lt;myVector dataType="stm:vector3Type"&gt;2.0 3.0 4.0&lt;/myVector&gt;</div>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:string">
         <xsd:pattern value="\s*([\-]|[+])?\d*\.?\d*(\s+|[,])([\-]|[+])?\d*\.?\d*(\s+|[,])([\-]|[+])?\d*\.?\d*\s*"/>
      </xsd:restriction>
   </xsd:simpleType><xsd:attributeGroup id="attGp.angleUnits" name="angleUnits">
  <xsd:attribute id="att.angleUnits" name="units" type="angleUnitsType">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">Restricts units to radians or degrees.</div> 
        <div xmlns="" class="description"/> 
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup id="attGp.atomRef" name="atomRef">
  <xsd:attribute id="att.atomRef" name="atomRef" type="atomRefType">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A reference to an atom.</div> 
        <div xmlns="" class="description">Typical use would be a bond with only one atom 
	(e.g. the other end is to a bond or electrons).</div> 
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup id="attGp.atomRefArray" name="atomRefArray">
  <xsd:attribute id="att.atomRefArray" name="atomRefArray" type="atomRefArrayType">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">An array of references to atoms.</div> 
        <div xmlns="" class="description">Typical use would be to atoms defining a plane.</div> 
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup id="attGp.atomRefs2" name="atomRefs2">
  <xsd:attribute id="att.atomRefs2" name="atomRefs2" type="atomRefs2Type">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A list of two references to atoms.</div> 
        <div xmlns="" class="description">Typically used for defining bonds.</div> 
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup id="attGp.atomRefs3" name="atomRefs3">
  <xsd:attribute id="att.atomRefs3" name="atomRefs3" type="atomRefs3Type">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A list of three references to atoms.</div> 
        <div xmlns="" class="description">Typically used for defining angles, 
        but could also be used to define a three-centre bond.</div> 
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:attributeGroup id="attGroup.atomRefs4" name="atomRefs4">
  <xsd:attribute id="att.atomRefs4" name="atomRefs4" type="atomRefs4Type">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A list of 4 references to atoms.</div> 
        <div xmlns="" class="description">Typically used for defining torsions and atomParities, 
        but could also be used to define a four-centre bond.</div> 
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>
</xsd:attributeGroup><xsd:element name="angle" id="el.angle">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A "bond" angle between three atoms.
      </div>
      <div xmlns="" class="description">
        <p>It can be used for:</p>
        <ul>
           <li>Recording experimentally determined bond angles (e.g. in
        a crystallographic paper).</li>
           <li>Providing the angle component for internal coordinates (e.g.
        z-matrix).</li>
        </ul>
      </div>
      <div xmlns="" class="example" href="cmlCore/examples/angle1.xml">&lt;molecule id="m1" title="angle example"&gt;<br/>  &lt;atomArray&gt;<br/>    &lt;atom id="a1"&gt;&lt;/atom&gt;<br/>    &lt;atom id="a2"&gt;&lt;/atom&gt;<br/>    &lt;atom id="a3"&gt;&lt;/atom&gt;<br/>  &lt;/atomArray&gt;<br/>  &lt;angle units="degrees" atomRefs3="a1 a2 a3"&gt;123.4&lt;/angle&gt;<br/>&lt;/molecule&gt;</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType><xsd:simpleContent>
      <xsd:extension base="nonNegativeAngleType">
        <xsd:attributeGroup ref="tit_id_conv_dictGroup"/>
        <xsd:attributeGroup ref="atomRefs3"/>
        <xsd:attributeGroup ref="angleUnits"/>
        <xsd:attributeGroup ref="errorValue"/>
        <xsd:attributeGroup ref="errorBasis"/>
        <xsd:attributeGroup ref="min"/>
        <xsd:attributeGroup ref="max"/>
        <xsd:attributeGroup ref="ref"/>
      </xsd:extension>
    </xsd:simpleContent></xsd:complexType>
</xsd:element><xsd:element name="atom" id="el.atom">
    <xsd:annotation>
        <xsd:documentation>
            <div xmlns="" class="summary">An atom.
            </div>
            <div xmlns="" documentation="general">
                <p>
               Usually within a <tt>molecule</tt>.
        It is almost always contained within <tt>atomArray</tt>.
        </p>
            </div>
            <div xmlns="" class="example" href="cmlCore/examples/atom1.xml">&lt;cml title="single atom example"&gt;<br/>&lt;atom id="a1" title="O3'" elementType="O" formalCharge="1" hydrogenCount="1" isotope="17" occupancy="0.7" x2="1.2" y2="2.3" x3="3.4" y3="4.5" z3="5.6" convention="ABC" dictRef="chem:atom"&gt;<br/>  &lt;scalar title="dipole" dictRef="d:dip" units="units:debye"&gt;0.2&lt;/scalar&gt;<br/>  &lt;atomParity atomRefs4="a3 a7 a2 a4"&gt;1&lt;/atomParity&gt;<br/>  &lt;electron id="e1" atomRef="a1" count="2"&gt;&lt;/electron&gt;<br/>&lt;/atom&gt;<br/>&lt;/cml&gt;</div>
        </xsd:documentation>
        <xsd:appinfo/>
    </xsd:annotation>
    <xsd:complexType><xsd:choice><xsd:choice minOccurs="0" maxOccurs="unbounded">
                <xsd:annotation>
                    <xsd:documentation>
                        <div xmlns="" class="general">
                            <p>
                     the electron children: One or more electrons associated with the atom. The <a href="st.atomRefType">atomRef</a> on the <tt>electron</tt> should
                     point to the id on the atom. We may relax this later and allow
                     reference by context.</p>
                        </div>
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:element ref="name"/>
                <xsd:element ref="array"/>
                <xsd:element ref="matrix"/>
                <xsd:element ref="scalar"/>
                <xsd:element ref="atomParity"/>
                <xsd:element ref="electron">
</xsd:element>
            </xsd:choice><xsd:sequence>
  <xsd:element ref="particle" minOccurs="0" maxOccurs="unbounded"/>
</xsd:sequence></xsd:choice><xsd:attributeGroup ref="id"/><xsd:attribute id="el.atom.count" name="count" type="countType">

            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="summary">The occurrence count of the atom. 
               </div>
                    <div xmlns="" class="description">Most useful in <tt>formula</tt>
                  but possibly useful in <tt>atomArray</tt> where coordinates and
                  connectivity is not defined. No formal default, but assumed to be 1. 
               </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.elementType" name="elementType" type="elementTypeType">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>The elementType. Almost mandatory</p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.formalCharge" name="formalCharge" type="formalChargeType">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="summary">The formalCharge on the atom (in electrons). </div>
                    <div xmlns="" class="description">NOT the calculated charge or oxidation state. No formal default, but its absence implies 0. It may be good practice to include it explicitly.
               </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.hydrogenCount" name="hydrogenCount" type="hydrogenCountType">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>The explicit hydrogen count</p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.nonHydrogenCount" name="nonHydrogenCount" type="nonHydrogenCountType">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>The non-hydrogen count (obsolete - moved to CML Query)</p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.isotope" name="isotope" type="isotopeType">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>The isotopic mass. Default implies "natural abundance"</p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.occupancy" name="occupancy" type="occupancyType">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>The occupancy (mainly from crystallography)</p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.x2" name="x2" type="xsd:float">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>The x coordinate (arbitrary units) of a 2-D representation (unrelated to 3-D structure).
             Note that x- and y- 2D coordinates are required for graphical stereochemistry
             such as wedge/hatch. x- and y- coordinates must be both present or both absent.</p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.x3" name="x3" type="xsd:float">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>The x coordinate (in Angstrom units) of a 3-D cartesian representation.
              x3 y3 and z3 coordinates must be both present or both absent.</p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.xFract" name="xFract" type="xsd:float">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>The fractional x coordinate in a crystal structure.
              xFract, yFract and zFract coordinates must be all present or all absent.
              A <tt>crystal</tt> element is required</p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.xy2" name="xy2" type="coordinate2Type">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>The combined x and y coordinates of a 2-D representation (unrelated to 3-D structure).
             Note that x- and y- 2D coordinates are required for graphical stereochemistry
             such as wedge/hatch.</p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.xyz3" name="xyz3" type="coordinate3Type">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>The combined x, y, z coordinates (in Angstrom units) of a 3-D cartesian representation.</p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.xyzFract" name="xyzFract" type="coordinate3Type">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>The combined x, y, z fractional coordinates in a crystal structure.
              A <tt>crystal</tt> element is required</p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.y2" name="y2" type="xsd:float">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>The y coordinate (arbitrary units) of a 2-D representation (unrelated to 3-D structure).
             Note that x2 and y2 coordinates are required for graphical stereochemistry
             such as wedge/hatch. x2 and y2 coordinates must be both present or both absent.</p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.y3" name="y3" type="xsd:float">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>The y coordinate (in Angstrom units) of a 3-D cartesian representation.
              x3 y3 and z3 coordinates must be both present or both absent.</p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.yFract" name="yFract" type="xsd:float">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>The fractional x coordinate in a crystal structure.
              xFract, yFract and zFract coordinates must be all present or all absent.
              A <tt>crystal</tt> element is required</p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.z3" name="z3" type="xsd:float">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>The z coordinate (in Angstrom units) of a 3-D cartesian representation.
              x3 y3 and z3 coordinates must be both present or both absent.</p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute id="el.atom.zFract" name="zFract" type="xsd:float">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>The fractional x coordinate in a crystal structure.
              xFract, yFract and zFract coordinates must be all present or all absent.
              A <tt>crystal</tt> element is required</p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attributeGroup ref="title"/><xsd:attributeGroup ref="convention"/><xsd:attributeGroup ref="dictRef"/><xsd:attributeGroup ref="ref"/><xsd:attribute name="role" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>
                    <div xmlns="" class="general">
                        <p>This can be used to describe the purpose of atoms whose <tt>elementType</tt>s are <tt>dummy</tt> or <tt>locant</tt>. </p>
                    </div>
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute><xsd:attribute name="atomTypeRef" id="atom.cmlcomp.att.atomTypeRef">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">a reference to the atomType for the element.</div>
            <div xmlns=""><p>This is a CCML extension to core CML. <tt>atomType</tt>s will normally be defined independently of a particular calculation and stored in a dictionary. The attribute may be included in a primary definition of an <tt>atom</tt> in a molecule or may be added later through the <tt>inherit</tt> mechanism.</p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attribute name="dx3" id="atom.cmlcomp.att.dx3" type="xsd:float">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">displacement along the Cartesian X axis.</div>
            <div xmlns=""><p>This is a CCML extension to core CML. It represents a change in the Cartesian X coordinate (e.g. for vibrational modes, molecular dynamics, etc.). Whether dx3 can be added to an <tt>x3</tt> value depends on the semantics of the application. </p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attribute name="dy3" id="atom.cmlcomp.att.dy3" type="xsd:float">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">displacement along the Cartesian Y axis.</div>
            <div xmlns=""><p>This is a CCML extension to core CML. It represents a change in the Cartesian Y coordinate (e.g. for vibrational modes, molecular dynamics, etc.). See <tt>dx3</tt>.</p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attribute name="dz3" id="atom.cmlcomp.att.dz3" type="xsd:float">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">displacement along the Cartesian Z axis.</div>
            <div xmlns=""><p>This is a CCML extension to core CML. It represents a change in the Cartesian Z coordinate (e.g. for vibrational modes, molecular dynamics, etc.). See <tt>dx3</tt>.</p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attribute name="dxyz3" id="atom.cmlcomp.att.dxyz3" type="coordinate3Type">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">displacement along the Cartesian X, Y, Z axes.</div>
            <div xmlns=""><p>This is a CCML extension to core CML. It represents combined changes in the Cartesian X, Y, and Z coordinates and is an alternative to dx3, etc. See <tt>dx3</tt>.</p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attribute name="vx" id="atom.cmlcomp.att.vx" type="xsd:float">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">velocity along the Cartesian X axis.</div>
            <div xmlns=""><p>This is a CCML extension to core CML.</p></div>
            <div xmlns=""><p>Units MUST be given in velocityUnits in the grandparent molecule; there are NO defaults.</p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attribute name="vy" id="atom.cmlcomp.att.vy" type="xsd:float">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">velocity along the Cartesian Y axis.</div>
            <div xmlns=""><p>This is a CCML extension to core CML.</p></div>
            <div xmlns=""><p>Units MUST be given in velocityUnits in the grandparent molecule; there are NO defaults.</p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attribute name="vz" id="atom.cmlcomp.att.vz" type="xsd:float">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">velocity along the Cartesian Z axis.</div>
            <div xmlns=""><p>This is a CCML extension to core CML.</p></div>
            <div xmlns=""><p>Units MUST be given in velocityUnits in the grandparent molecule; there are NO defaults.</p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attribute name="vxyz" id="atom.cmlcomp.att.vxyz" type="vector3Type">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">velocity as a vector</div>
            <div xmlns=""><p>This is a CCML extension to core CML.</p></div>
            <div xmlns=""><p>Units MUST be given in velocityUnits in the grandparent molecule; there are NO defaults.</p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute></xsd:complexType>
</xsd:element><xsd:element name="atomArray" id="el.atomArray">  
      <xsd:annotation>
         <xsd:documentation>
          <div xmlns="" class="summary">A container for a list of atoms.
          </div>
          <div xmlns="" class="description">A child of <a href="el.molecule">molecule</a> and contains
        <tt>atom</tt> information. There are two strategies:
        <ul>
                  <li>Create individual <a href="el.atom">atom</a> elements under 
                  <a href="el.atomArray">atomArray</a>
        (in any order). This gives the greatest flexibility but is the most verbose.</li>
                  <li>Create <tt>*Array</tt> attributes (e.g. of 
                  <a href="st.elementTypeArrayType">elementTypeArrayType</a> under 
        <a href="el.atomArray">atomArray</a>. This requires all arrays to be of identical lengths
        with explicit values for all atoms in every array. 
        This is NOT suitable for complexType
        atom children such as <a href="el.atomParity">atomParity</a>
        or composite types such as <tt>xy2</tt>.
        It also cannot be checked as easily by schema- and schematron validation. The
        <tt>atomIDArray</tt> attribute is mandatory. It is allowed (though not yet recommended) to
        add <tt>*Array</tt> children such as <a href="el.floatArray">floatArray</a>
                  </li>
               </ul>
               <p>The attributes are directly related to the scalar attributes under
        <a href="el.atom">atom</a> which should be consulted for more info.</p>
	<p>NOTE: The CML-1 specifications are also supported but are deprecated</p>
	. </div>
    <div xmlns="" class="example" href="cmlCore/examples/atomArray1.xml">&lt;cml title="atomArray CML1"&gt;<br/>&lt;list&gt;<br/>  &lt;atomArray&gt;<br/>    &lt;atom id="a1" elementType="O" hydrogenCount="1"&gt;&lt;/atom&gt;<br/>     &lt;atom id="a2" elementType="N" hydrogenCount="1"&gt;&lt;/atom&gt;<br/>    &lt;atom id="a3" elementType="C" hydrogenCount="3"&gt;&lt;/atom&gt;<br/>  &lt;/atomArray&gt;<br/><br/>  &lt;atomArray atomID="a1 a2 a3" elementType="O N C" hydrogenCount="1 1 3"&gt;&lt;/atomArray&gt;<br/>&lt;/list&gt;<br/>&lt;/cml&gt;
      <p>Example - these are exactly equivalent representations</p>
</div>
    </xsd:documentation>
      </xsd:annotation>
      <xsd:complexType><xsd:choice><xsd:element ref="atom" maxOccurs="unbounded"/><xsd:element ref="array" minOccurs="0" maxOccurs="unbounded"/></xsd:choice><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attribute name="elementType" type="elementTypeArrayType">
            <xsd:annotation>
               <xsd:documentation>
                   <div xmlns="" class="summary">Almost mandatory. see <a href="el.atom.elementType">elementType</a></div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="count" type="integerArrayType">
            <xsd:annotation>
               <xsd:documentation>
                   <div xmlns="" class="summary">See <a href="el.atom.count">count</a></div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="formalCharge" type="integerArrayType">
            <xsd:annotation>
               <xsd:documentation>
                   <div xmlns="" class="summary">See <a href="el.atom.formalCharge">formalCharge</a></div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="hydrogenCount" type="integerArrayType">
            <xsd:annotation>
               <xsd:documentation>
                  <div xmlns="" class="summary">See <a href="el.atom.hydrogenCount">hydrogenCount</a></div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="nonHydrogenCount" type="integerArrayType">
            <xsd:annotation>
               <xsd:documentation>
                 <div xmlns="" class="summary">See <a href="el.atom.nonHydrogenCount">nonHydrogenCount</a></div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="isotope" type="floatArrayType">
            <xsd:annotation>
               <xsd:documentation>
                   <div xmlns="" class="summary">See <a href="el.atom.isotope">isotope</a></div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="occupancy" type="floatArrayType">
            <xsd:annotation>
               <xsd:documentation>
                   <div xmlns="" class="summary">See <a href="el.atom.occupancy">occupancy</a></div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="x2" type="coordinateComponentArrayType">
            <xsd:annotation>
               <xsd:documentation>
                  <div xmlns="" class="summary">See <a href="el.atom.x2">x2</a></div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="x3" type="coordinateComponentArrayType">
            <xsd:annotation>
               <xsd:documentation>
                  <div xmlns="" class="summary">See <a href="el.atom.x3">x3</a></div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="xFract" type="coordinateComponentArrayType">
            <xsd:annotation>
               <xsd:documentation>
                  <div xmlns="" class="summary">See <a href="el.atom.xFract">xFract</a></div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="y2" type="coordinateComponentArrayType">
            <xsd:annotation>
               <xsd:documentation>
                  <div xmlns="" class="summary">See <a href="el.atom.y2">y2</a></div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="y3" type="coordinateComponentArrayType">
            <xsd:annotation>
               <xsd:documentation>
                      <div xmlns="" class="summary">See <a href="el.atom.y3">y3</a></div>
             </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="yFract" type="coordinateComponentArrayType">
            <xsd:annotation>
               <xsd:documentation>
                  <div xmlns="" class="summary">See <a href="el.atom.yFract">yFract</a></div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="z3" type="coordinateComponentArrayType">
            <xsd:annotation>
               <xsd:documentation>
                    <div xmlns="" class="summary">See <a href="el.atom.z3">z3</a></div>
             </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="zFract" type="coordinateComponentArrayType">
            <xsd:annotation>
               <xsd:documentation>
                    <div xmlns="" class="summary">See <a href="el.atom.zFract">zFract</a></div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="atomID" type="atomRefArrayType">
            <xsd:annotation>
               <xsd:documentation>
                  <div xmlns="" class="summary">See <a href="el.atom.id">atomID</a></div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attributeGroup ref="ref">
            
        </xsd:attributeGroup></xsd:complexType>
   </xsd:element><xsd:element name="atomParity" id="el.atomParity">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">The stereochemistry round an atom centre.
      </div>
      <div xmlns="" class="description">
            <p>It follows the
        convention of the MIF format, and uses 4 distinct atoms to define the
        chirality. These can be any atoms (though they are normally bonded to
        the current atom). There is no default order and the order is defined
        by the atoms in the atomRefs4 attribute. If there are only 3 ligands, the
        current atom should be included in the 4 atomRefs.
        </p>
            <p>The value of the parity is a signed number. (It can only be zero if
        two or more atoms are coincident or the configuration is planar). The
        sign is the sign of the chiral volume created by the four atoms (a1, a2,
        a3, a4):</p>
            <pre>
       |  1  1  1  1 |
       | x1 x2 x3 x4 |
       | y1 y2 y3 y4 |
       | z1 z2 z3 z4 |
        </pre>
            <p>Note that <tt>atomParity</tt> cannot be used with the *Array syntax for
        atoms.</p>
      </div>
      <div xmlns="" class="example" href="cmlCore/examples/atomParity1.xml">&lt;cml title="atom parity example"&gt;<br/>  &lt;atom id="a1"&gt;<br/>    &lt;atomParity atomRefs4="a3 a5 a2 a9"&gt;1&lt;/atomParity&gt;<br/>  &lt;/atom&gt;<br/>&lt;/cml&gt;</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType><xsd:simpleContent>
      <xsd:extension base="xsd:float">
        <xsd:attributeGroup ref="tit_id_conv_dictGroup"/>
        <xsd:attributeGroup ref="atomRefs4"/>
      </xsd:extension>
    </xsd:simpleContent></xsd:complexType>
</xsd:element><xsd:element name="bond" id="el.bond">  
      <xsd:annotation>
         <xsd:documentation>
         <div xmlns="" class="summary">A bond between atoms, or between atoms and bonds. 
         </div>
           <div xmlns="" class="general"><p>
               <tt>bond</tt> is a child of <tt>bondArray</tt> and contains
          bond information. Bond must refer to at least two atoms (using 
          <a href="st.atomRefs2Type">atomRefs2</a>) 
          but may also refer to more for multicentre bonds. Bond is often EMPTY but
          may contain <a href="el.electron">electron</a>, <a href="el.length">length</a> 
          or <a href="el.bondStereo">bondStereo</a> elements.</p></div>
      <div xmlns="" class="example" href="cmlCore/examples/bond1.xml">&lt;cml title="bondArray example"&gt;<br/>  &lt;bondArray&gt;<br/>    &lt;bond id="b1" atomRefs2="a3 a8" order="D"&gt;<br/>      &lt;electron bondRef="b1"&gt;&lt;/electron&gt;<br/>      &lt;bondStereo&gt;C&lt;/bondStereo&gt;<br/>    &lt;/bond&gt;<br/>    &lt;bond id="b2" atomRefs2="a3 a8" order="S"&gt;<br/>      &lt;bondStereo convention="MDL" conventionValue="6"&gt;&lt;/bondStereo&gt;<br/>    &lt;/bond&gt;<br/>  &lt;/bondArray&gt;<br/>&lt;/cml&gt;</div>
      <div xmlns="" class="example" href="cmlCore/examples/bond2.xml">&lt;cml title="metal-bond example"&gt;<br/><br/>  &lt;atomArray&gt;<br/>    &lt;atom id="pt1" elementType="Pt"&gt;&lt;/atom&gt;<br/>    &lt;atom id="cl1" elementType="Cl"&gt;&lt;/atom&gt;<br/>    &lt;atom id="cl2" elementType="Cl"&gt;&lt;/atom&gt;<br/>    &lt;atom id="cl3" elementType="Cl"&gt;&lt;/atom&gt;<br/>    &lt;atom id="c1" elementType="C" hydrogenCount="2"&gt;&lt;/atom&gt;<br/>    &lt;atom id="c2" elementType="C" hydrogenCount="2"&gt;&lt;/atom&gt;<br/>  &lt;/atomArray&gt;<br/>  &lt;bondArray&gt;<br/>    &lt;bond id="b1" atomRefs2="c1 c2" order="D"&gt;&lt;/bond&gt;<br/>    &lt;bond id="b2" atomRefs2="pt1 cl1" order="S"&gt;&lt;/bond&gt;<br/>    &lt;bond id="b3" atomRefs2="pt1 cl2" order="S"&gt;&lt;/bond&gt;<br/>    &lt;bond id="b4" atomRefs2="pt1 cl3" order="S"&gt;&lt;/bond&gt;<br/>    &lt;bond id="b5" atomRefs="pt1" bondRefs="b1"&gt;&lt;/bond&gt;<br/>  &lt;/bondArray&gt;<br/>&lt;/cml&gt;</div>
       </xsd:documentation>
       <xsd:documentation>
      <div xmlns="" class="validation" href="cmlCore.val.bond.xml"/>
       </xsd:documentation>
        <xsd:appinfo>
          <comment xmlns="">Validate Bonds</comment>
          <template xmlns="" match="bond" id="val-bond">
          <comment>Atom Refs for 2-atom bond</comment>
            <variable name="at1" select="substring-before(normalize-space(@atomRefs2),' ')"/>
            <variable name="at2" select="substring-after(normalize-space(@atomRefs2),' ')"/>
            <comment>Are atoms distinct?</comment>
            <if test="$at1 = $at2">
              <call-template name="error">
                <with-param name="error">BOND (<value-of select="@id"/>): ATOMS not distinct: <value-of select="$at1"/></with-param>
              </call-template>
            </if>
            <comment>Do both atoms exist in current molecule context?</comment>
            <if test="not(key('atoms', $at1))">
              <call-template name="error">
                <with-param name="error">BOND (<value-of select="@id"/>): ATOMREF not found: <value-of select="$at1"/></with-param>
              </call-template>
            </if>
            <if test="not(key('atoms', $at2))">
              <call-template name="error">
                <with-param name="error">BOND (<value-of select="@id"/>): ATOMREF not found: <value-of select="$at2"/></with-param>
              </call-template>
            </if>
          </template>
        </xsd:appinfo>
      </xsd:annotation>
      <xsd:complexType id="bond.content.id"><xsd:choice><xsd:choice minOccurs="0" maxOccurs="unbounded">
            <xsd:element ref="electron">
               <xsd:annotation>
                  <xsd:documentation>
                    <div xmlns="" class="summary">One or more electrons associated with the bond. </div>
                     <div xmlns="" class="general"><p>. The <a href="st.bondRefType">bondRef</a> on the <tt>electron</tt> should
                     point to the id on the bond. We may relax this later and allow
                     reference by context.(We </p>
                  </div>
                 </xsd:documentation>
               </xsd:annotation>
            </xsd:element>        
            <xsd:element ref="bondStereo">
               <xsd:annotation>
                  <xsd:documentation>
                    <div xmlns="" class="summary">The stereo convention for the bond. </div>
                     <div xmlns="" class="general"><p>only one convention allowed</p>
                   </div>
                 </xsd:documentation>
               </xsd:annotation>
            </xsd:element>        
            <xsd:element ref="length">
               
            </xsd:element>        
         </xsd:choice></xsd:choice><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attributeGroup ref="ref"/><xsd:attribute name="atomRefs2" type="atomRefs2Type">
            <xsd:annotation>
               <xsd:documentation>
                 <div xmlns="" class="summary">The two atoms in the bond. </div>
                 <div xmlns="" class="general"><p>. This will be the normal reference attribute on the bond element. The order of atoms is preserved and may
                  matter for some conventions (e.g. wedge/hatch or donor bonds)</p>
               </div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="atomRefs" type="atomRefArrayType">
            <xsd:annotation>
               <xsd:documentation>
                 <div xmlns="" class="summary">The atoms in the bond. </div>
                 <div xmlns="" class="general"><p>. This is designed for multicentre bonds (as in delocalised systems or electron-deficient centres. The semantics are experimental at this stage. As an example, a B-H-B bond might be described as
                 <tt>&lt;bond atomRefs="b1 h2 b2"/&gt;</tt></p>
               </div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="bondRefs" type="bondRefArrayType">
            <xsd:annotation>
               <xsd:documentation>
                 <div xmlns="" class="summary">Bonds involved in the bond. </div>
                 <div xmlns="" class="general"><p>. This is designed for pi-bonds and other systems where formal valence bonds are not drawn to atoms. The semantics are experimental at this stage. As an example, a Pt-|| bond (as the Pt-ethene bond in Zeise's salt) might be described as
                 <tt>&lt;bond atomRefs="pt1" bondRefs="b32"/&gt;</tt></p>
               </div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="order" type="orderType">
            <xsd:annotation>
               <xsd:documentation>
                    <div xmlns="" class="summary">The order of the bond. </div>
                 <div xmlns="" class="general"><p>There is NO default. This order is for
               bookkeeping only and is not related to length, QM calculations
               or other experimental or theoretical calculations.
               see <a href="st.orderType">
                        <tt>orderType</tt>
                     </a>
                  </p>
               </div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute></xsd:complexType>
   </xsd:element><xsd:element name="bondArray" id="el.bondArray">  
      <xsd:annotation>
         <xsd:documentation>
           <div xmlns="" class="summary">A container for a number of bonds.
           </div>
           <div xmlns="" class="description">
            <p>
               <tt>bondArray</tt> is a child of <tt>molecule</tt> and contains
          <tt>bond</tt> information. There are two strategies:</p>
            <ul>
               <li>Create individual <tt>bond</tt> elements under <tt>bondArray</tt>
        (in any order). This gives the greatest flexibility but is the most verbose.</li>
               <li>Create <tt>*Array</tt> attributes (e.g. of <tt>orderArrayType</tt> under 
        <tt>bondArray</tt>. This requires all arrays to be of identical lengths
        with explicit values for all bonds in every array. 
        This is NOT suitable for complexType
        bond children such as <a href="el.bondStereo">
                     <tt>bondStereo</tt>
                  </a>,
        nor can IDs be added to bonds..
        It also cannot be checked as easily by schema- and schematron validation. The
        <tt>atomRef1Array</tt> and <tt>atomRef2Array</tt> attributes are then
        mandatory. It is allowed (though not yet recommended) to
        add <tt>*Array</tt> children such as <tt>floatArray</tt>
               </li>
            </ul>
            <p>The attributes are directly related to the scalar attributes under
        <a href="el.atom">
                  <tt>atom</tt>
               </a> which should be consulted for more info.</p>
               </div>
           <div xmlns="" class="example" href="cmlCore/examples/bondArray1.xml">&lt;cml title="bondArray example 1"&gt;<br/>  &lt;list&gt;<br/>    &lt;bondArray&gt;<br/>      &lt;bond id="b1" atomRefs2="a1 a2" order="1"&gt;&lt;/bond&gt;<br/>      &lt;bond id="b2" atomRefs2="a1 a3" order="2"&gt;&lt;/bond&gt;<br/>      &lt;bond id="b3" atomRefs2="a3 a5" order="1"&gt;&lt;/bond&gt;<br/>    &lt;/bondArray&gt;<br/>    &lt;bondArray atomRef1="a1 a1 a3" atomRef2="a2 a3 a5" order="1 2 1"&gt;&lt;/bondArray&gt;<br/>  &lt;/list&gt;<br/>&lt;/cml&gt;
            <p>Example - these are exactly equivalent representations</p>
            </div>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexType><xsd:choice><xsd:element ref="bond" maxOccurs="unbounded"/><xsd:element ref="array" minOccurs="0" maxOccurs="unbounded"/></xsd:choice><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attribute name="bondID" type="bondRefArrayType">
            <xsd:annotation>
               <xsd:documentation>
                  <p xmlns="">The IDs for the bonds. Required in array mode</p>
               </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="atomRef1" type="atomRefArrayType">
            <xsd:annotation>
               <xsd:documentation>
                  <p xmlns="">The first atoms in each bond. Required in array mode</p>
               </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="atomRef2" type="atomRefArrayType">
            <xsd:annotation>
               <xsd:documentation>
                  <p xmlns="">The second atoms in each bond. Required in array mode</p>
               </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute name="order" type="orderArrayType">
            <xsd:annotation>
               <xsd:documentation>
                  <p xmlns="">The bond orders in each bond. Used in array mode</p>
               </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute></xsd:complexType>
   </xsd:element><xsd:element name="bondStereo" id="el.bondStereo">  
      <xsd:annotation>
         <xsd:documentation>
           <div xmlns="" class="summary">A container supporting "cis/trans", "wedge hatch" 
           and other stereochemistry. 
           </div>
            <div xmlns="" class="description"><p>An explict
        list of atomRefs must be given, or it must be a child of <tt>bond</tt>. 
        There are no implicit conventions
        such as E/Z. This will be extended to other types
        of stereochemistry.</p>
        <p>At present the following are supported:</p>
        <ul>
          <li>No atomRefs attribute. <b>Deprecated, but probably unavoidable</b>. 
          This must be a child of <tt>bond</tt> where it picks up the two atomRefs
          in the <tt>atomRefs2</tt> attribute. Possible values are C/T (which only makes sense
          if there is exactly one ligand at each end of the bond) and W/H. The latter
          should be raplaced by <tt>atomParity</tt> wherever possible. Note that W/H makes
          no sense without 2D atom coordinates.</li>
          <li><b>atomRefs4 attribute</b>. The 4 atoms represent a cis or trans configuration. 
          This may or may not be a child of <tt>bond</tt>; if so the second and third atomRefs
          should be identical with the two atomRefs in the bond. This structure can be used
          to guide processors in processing stereochemistry and is recommended, since there is
          general agreement on the semantics. The semantics of <tt>bondStereo</tt> not related to
          bonds is less clear (e.g. cumulenes, substituted ring nuclei) etc.It is 
          currently an error to have more than one <tt>bondStereo</tt> referring to the same ordered
          4-atom list</li>
          <li><b>atomRefs attribute</b>. There are other stereochemical conventions such as cis/trans
          for metal complexes which require a variable number of reference atoms. This allows 
          users to create their own - at present we do not see CML creating exhaustive tables.
          For example cis/trans square-planar complexes might require 4 (or 5) atoms for their
          definition, octahedral 6 or 7, etc. In principle this is very powerful and could
          supplement or replace the use of <i>cis-</i>, <i>mer-</i>, etc.</li>
        </ul>
        <p>the <tt>atomRefs</tt> and <tt>atomRefs4</tt> attributes cannot be used
        simultaneously.</p></div>
        <div xmlns="" class="example" href="cmlCore/examples/bond1.xml">&lt;cml title="bondArray example"&gt;<br/>  &lt;bondArray&gt;<br/>    &lt;bond id="b1" atomRefs2="a3 a8" order="D"&gt;<br/>      &lt;electron bondRef="b1"&gt;&lt;/electron&gt;<br/>      &lt;bondStereo&gt;C&lt;/bondStereo&gt;<br/>    &lt;/bond&gt;<br/>    &lt;bond id="b2" atomRefs2="a3 a8" order="S"&gt;<br/>      &lt;bondStereo convention="MDL" conventionValue="6"&gt;&lt;/bondStereo&gt;<br/>    &lt;/bond&gt;<br/>  &lt;/bondArray&gt;<br/>&lt;/cml&gt;</div>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexType><xsd:simpleContent>
            <xsd:extension base="stereoType">
               <xsd:attributeGroup ref="atomRefs4"/>
               <xsd:attributeGroup ref="atomRefArray"/>
               <xsd:attributeGroup ref="tit_id_conv_dictGroup"/>
               <xsd:attribute name="conventionValue" type="xsd:string">
                 <xsd:annotation>
                   <xsd:documentation>
                     <div xmlns="" class="summary">The stereo value when the <tt>convention</tt>
                     attribute is used. </div>
                     <div xmlns="" class="description">When convention is used this attribute must be present
                     and element content must be empty. </div>
                   </xsd:documentation>
                 </xsd:annotation>
               </xsd:attribute>
            </xsd:extension>
         </xsd:simpleContent></xsd:complexType>
   </xsd:element><xsd:element name="cml" id="el.cml">  
   <xsd:annotation>
      <xsd:documentation>
   <div xmlns="" class="summary">A general container for CML elements. 
   </div>
   <div xmlns="" class="description">
         <p>Often the root of the
             CML (sub)document. Has no explicit function but serves to hold
             the dictionaries, namespace, and can alert CML processors and search/XMLQuery tools
             that there is chemistry in the document. Can contain
             any content, but usually a list of molecules and other CML
             components. Can be nested</p>
             </div>
      <div xmlns="" class="example" href="cmlCore/examples/cml1.xml">&lt;cml id="c1" title="demo of cml subelements"&gt;<br/>  &lt;stm:dictionary dictRef="d1" href="dict1.xml"&gt;&lt;/stm:dictionary&gt;<br/>  &lt;stm:unitList dictRef="u1" href="units1.xml"&gt;&lt;/stm:unitList&gt;<br/>  &lt;cml&gt;<br/>    &lt;molecule id="m1"&gt;&lt;/molecule&gt;<br/>  &lt;/cml&gt;  <br/>  &lt;molecule id="m2" title="dummy"&gt;&lt;/molecule&gt;<br/>  &lt;metadata&gt;&lt;/metadata&gt;<br/>  &lt;reaction&gt;<br/>    &lt;reactantList&gt;<br/>      &lt;molecule id="r1"&gt;&lt;/molecule&gt;<br/>    &lt;/reactantList&gt;<br/>    &lt;productList&gt;<br/>      &lt;molecule id="p1"&gt;&lt;/molecule&gt;<br/>    &lt;/productList&gt;<br/>  &lt;/reaction&gt;<br/>  &lt;spectrum&gt;<br/>    &lt;data&gt;<br/>      &lt;stm:array&gt;&lt;/stm:array&gt;<br/>      &lt;stm:array&gt;&lt;/stm:array&gt;<br/>    &lt;/data&gt;<br/>  &lt;/spectrum&gt;<br/>  &lt;substanceList id="subList1"&gt;&lt;/substanceList&gt;<br/>  &lt;list&gt;<br/>    &lt;scalar title="some scalar"&gt;&lt;/scalar&gt;<br/>  &lt;/list&gt;<br/>&lt;/cml&gt;</div>
      </xsd:documentation>
   </xsd:annotation>
   <xsd:complexType><xsd:sequence minOccurs="0" maxOccurs="unbounded"><xsd:annotation>
         <xsd:documentation>
           <div xmlns="" class="description">No specific restrictions. </div>
         </xsd:documentation>
       </xsd:annotation><xsd:any processContents="lax"/></xsd:sequence><xsd:attributeGroup ref="tit_id_conv_dictGroup"/></xsd:complexType>
</xsd:element><xsd:element name="crystal" id="el.crystal">  
   <xsd:annotation>
      <xsd:documentation>
       <div xmlns="" class="summary">A container for crystallographic 
       cell parameters and spacegroup. 
       </div>
   <div xmlns="" class="description">
         <p>. Required if
     fractional coordinates are provided for a molecule.</p>
     <p>There are precisely SIX child <tt>scalar</tt>s to represent the cell lengths
     and angles in that order. There are no default values; </p></div>
   <div xmlns="" class="example" href="cmlCore/examples/crystal1.xml">&lt;cml title="crystal example"&gt;<br/>  &lt;molecule id="m1"&gt;<br/>    &lt;crystal z="4"&gt;<br/>      &lt;scalar title="a" errorValue="0.001" units="units:angstrom"&gt;4.500&lt;/scalar&gt;<br/>      &lt;scalar title="b" errorValue="0.001" units="units:angstrom"&gt;4.500&lt;/scalar&gt;<br/>      &lt;scalar title="c" errorValue="0.001" units="units:angstrom"&gt;4.500&lt;/scalar&gt;<br/>      &lt;scalar title="alpha" units="units:degree"&gt;90&lt;/scalar&gt;<br/>      &lt;scalar title="beta" units="units:degree"&gt;90&lt;/scalar&gt;<br/>      &lt;scalar title="gamma" units="units:degree"&gt;90&lt;/scalar&gt;<br/>      &lt;symmetry id="s1" spaceGroup="Fm3m"&gt;&lt;/symmetry&gt;<br/>    &lt;/crystal&gt;<br/>    &lt;atomArray&gt;<br/>      &lt;atom id="a1" elementType="Na" formalCharge="1" xyzFract="0.0 0.0 0.0" xy2="+23.2 -21.0"&gt;&lt;/atom&gt; <br/>      &lt;atom id="a2" elementType="Cl" formalCharge="-1" xyzFract="0.5 0.0 0.0"&gt;&lt;/atom&gt; <br/>    &lt;/atomArray&gt;<br/>  &lt;/molecule&gt;<br/>&lt;/cml&gt;</div>
     </xsd:documentation>
   </xsd:annotation>
   <xsd:complexType><xsd:sequence><xsd:annotation>
            <xsd:documentation>
      <div xmlns="" class="summary">All 6 cell parameters must be given, even where angles are
      fixed by symmetry. The order is fixed as a,b,c,alpha,gamma,beta and software can
      neglect any title or dictRef attributes. Error estimates can be given if required.
      Any units can be used, but the defaults are Angstrom (10^-10 m) and degrees.
	. </div>
            </xsd:documentation>
         </xsd:annotation><xsd:element ref="scalar" minOccurs="6" maxOccurs="6">
       </xsd:element><xsd:element ref="symmetry" minOccurs="0"/></xsd:sequence><xsd:attribute name="z" type="xsd:nonNegativeInteger">
         <xsd:annotation>
            <xsd:documentation>
               <p xmlns="">The number of molecules per cell. Molecules
         are defined as the <tt>molecule</tt> which directly contains
         the <tt>crystal</tt> element.</p>
            </xsd:documentation>
         </xsd:annotation>
      </xsd:attribute><xsd:attributeGroup ref="tit_id_conv_dictGroup"/></xsd:complexType>
</xsd:element><xsd:element name="electron" id="el.electron">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">One or more electrons. 
      </div>
      <div xmlns="" class="description">
            <p>Since there is very little use of electrons in current 
            chemical information this is a fluid concept. I expect it to be used for electron
            counting, input and output of theochem operations, descriptions of orbitals,
            spin states, oxidation states, etc. Electrons can be associated with atoms, bonds
            and combinations of these. At present there is no hardcoded semantics. However,
            <tt>atomRef</tt> and similar attributes can be used to associate electrons with
            atoms or bonds
        </p></div>
       <div xmlns="" class="example" href="cmlCore/examples/electron1.xml">&lt;cml title="electron example"&gt;<br/>  &lt;molecule id="m1"&gt;<br/>    &lt;atomArray atomID="a1 a2 a3 a4 a5 a6"&gt;&lt;/atomArray&gt;<br/>    &lt;bondArray order="A A A A A A" bondID="b1 b2 b3 b4 b5 b6" atomRef1="a1 a2 a3 a4 a5 a6" atomRef2="a6 a1 a2 a3 a4 a5"&gt;&lt;/bondArray&gt;<br/>    &lt;electron count="6" bondRefs="b1 b2 b3 b4 b5 b6" atomRefs="a1 a2 a3 a4 a5 a6"&gt;&lt;/electron&gt;<br/>  &lt;/molecule&gt;<br/>&lt;/cml&gt;</div>
        </xsd:documentation>
      </xsd:annotation>
      <xsd:complexType><xsd:sequence/><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attribute name="atomRef" type="atomRefType"/><xsd:attribute name="atomRefs" type="atomRefArrayType"/><xsd:attribute name="bondRef" type="bondRefType"/><xsd:attribute name="bondRefs" type="bondRefArrayType"/><xsd:attribute name="count" type="xsd:positiveInteger">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">The number of electrons. </div>
               <div xmlns="" class="description">No formal default, but assumed to be 1. At present restricted to integers.
               </div>
             </xsd:documentation>
           </xsd:annotation>
         </xsd:attribute><xsd:attributeGroup ref="ref">
            
        </xsd:attributeGroup></xsd:complexType>
   </xsd:element><xsd:element name="formula" id="el.formula">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">The stochiometry of the molecule. 
      </div>
      <div xmlns="" class="description">
            <p>It is 
        defined by <tt>atomArray</tt>s each with a list of elementTypes and their
        counts (or default=1). All other information in the <tt>atomArray</tt>
        is ignored. <tt>formula</tt> are nestable so that aggregates (e.g. hydrates,
        salts, etc.) can be described. CML does not require that formula information
        is consistent with (say) crystallographic information; this allows for
        experimental variance.</p>
        <p>An alternative briefer representation is also available through the 
        <tt>conciseForm</tt>. This must include whitespace round all elements and 
        their counts, which must be explicit. </p>
      </div>
      <div xmlns="" class="example" href="cmlCore/examples/formula1.xml">&lt;cml title="formula example"&gt;<br/>  &lt;molecule id="sulfuricAcid"&gt;<br/>    &lt;formula concise="H 2 S 1 O 4"&gt;&lt;/formula&gt;<br/>  &lt;/molecule&gt;<br/>  &lt;molecule id="CuprammoniumSulfate"&gt;<br/>    &lt;formula title="[Cu(NH3)4]2+ SO42-]"&gt;<br/>      &lt;formula formalCharge="+2"&gt;<br/>        &lt;atomArray elementType="Cu"&gt;&lt;/atomArray&gt;<br/>        &lt;formula count="4"&gt;<br/>          &lt;atomArray elementType="N H" count="1 3"&gt;&lt;/atomArray&gt;<br/>        &lt;/formula&gt;<br/>      &lt;/formula&gt;<br/>      &lt;formula formalCharge="-2"&gt;<br/>        &lt;atomArray elementType="S O" count="1 4"&gt;&lt;/atomArray&gt;<br/>      &lt;/formula&gt;<br/>    &lt;/formula&gt;    <br/>  &lt;/molecule&gt;<br/>&lt;/cml&gt;</div>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexType><xsd:choice><xsd:choice minOccurs="0" maxOccurs="unbounded">
              <xsd:element ref="formula"/>
              <xsd:element ref="atomArray"/>
            </xsd:choice></xsd:choice><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attribute name="count" type="positiveNumberType">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">A multiplier for the formula. </div>
               <div xmlns="" class="description">No formal default but assumed to be 1. Allows for fractional components. </div>
             </xsd:documentation>
           </xsd:annotation>
         </xsd:attribute><xsd:attribute name="formalCharge" type="xsd:integer">
           <xsd:annotation>
             <xsd:documentation>
            <p xmlns="">The formal charge is normally calculated from the formal charges of the
            atoms. If the <tt>formalCharge</tt> attribute is given it overrides this 
            information completely. This allows (say) metal complexes to be represented
            when it is difficult to apportion the charges to atoms.</p>
             </xsd:documentation>
           </xsd:annotation>
         </xsd:attribute><xsd:attribute name="concise" type="formulaType">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">A concise string representing an (unstructured) formula. </div>
             </xsd:documentation>
           </xsd:annotation>
         </xsd:attribute></xsd:complexType>
   </xsd:element><xsd:element name="identifier" id="el.identifier">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="curation">2003-07-10: Fixed count on identifier children. </div>
      <div xmlns="" class="curation">2003-03-12: Added isotopic and atoms. </div>
      <div xmlns="" class="summary">IChI identifier. </div>
      <div xmlns="" class="description">
      <p>Supports compund identifiers such as IChI. At present uses the V0.9 IChI XML representation verbatim but will almost certainly change with future IChIs. </p>
      <p>The inclusion of elements from other namespaces causes problems with validation. The content model is deliberately LAX but the actual elements in IChI will fail the validation as they are not declared in CML.</p>
      </div>
      <div xmlns="" class="example" href="cmlCore/examples/ichi.xml">&lt;identifier version="0.93Beta" tautomeric="0"&gt;<br/>   &lt;basic&gt;C6H3ClN2O5,7-4-1H-3(8(10)11)2H-5(6(4)14H)9(12)13&lt;/basic&gt;<br/>   &lt;charge&gt;&lt;/charge&gt;<br/>  &lt;/identifier&gt;</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType><xsd:sequence maxOccurs="unbounded"><xsd:any processContents="lax"/></xsd:sequence><xsd:attribute name="version" type="xsd:string"/><xsd:attribute name="tautomeric" type="xsd:string"/></xsd:complexType>
</xsd:element><xsd:element name="length" id="el.length">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">A length between two atoms. 
      </div>
                    <div xmlns="" class="general"><p>This is either an experimental measurement
              or used to build up internal coordinates (as in a z-matrix)  (only one allowed)</p>
              <p>We expect to move length as a child of <a href="el.molecule">molecule</a> and
              remove it from here</p>
                  </div>
      <div xmlns="" class="example" href="cmlCore/examples/length1.xml">&lt;cml title="length example"&gt;<br/>  &lt;molecule id="m1"&gt;<br/>    &lt;atomArray atomID="a1 a2 a3"&gt;&lt;/atomArray&gt;<br/>    &lt;length atomRefs2="a3 a1"&gt;1.534&lt;/length&gt;<br/>  &lt;/molecule&gt;<br/>&lt;/cml&gt;</div>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexType><xsd:simpleContent>
            <xsd:extension base="xsd:float">
               <xsd:attributeGroup ref="tit_id_conv_dictGroup"/>
               <xsd:attributeGroup ref="atomRefs2"/>
               <xsd:attributeGroup ref="units"/>
               <xsd:attributeGroup ref="errorValue"/>
               <xsd:attributeGroup ref="errorBasis"/>
               <xsd:attributeGroup ref="min"/>
               <xsd:attributeGroup ref="max"/>
               <xsd:attributeGroup ref="ref">

                 </xsd:attributeGroup>
            </xsd:extension>
         </xsd:simpleContent></xsd:complexType>
   </xsd:element><xsd:element name="molecule" id="el.molecule">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">A container for atoms, bonds and submolecules. </div>
      <div xmlns="" class="description">
            <p>
         <tt>molecule</tt> is a container for atoms, bonds and submolecules along
        with properties such as crystal and non-builtin properties. It should either
        contain <tt>molecule</tt> or *Array for atoms and bonds. A molecule
        can be empty (e.g. we just know its name, id, etc.)</p>
        <p>"Molecule" need not represent a chemically meaningful molecule. It
        can contain atoms with bonds (as in the solid-sate) and it could 
        simply carry a name (e.g. "taxol") without formal representation
        of the structure. It can contain "sub molecules", which are often
        discrete subcomponents (e.g. guest-host).</p>
        <p>Molecule can contain a &lt;list&gt; element to contain data
        related to the molecule.
        Within this can be string/float/integer and other nested lists</p>
        </div>
        <div xmlns="" class="example" href="cmlCore/examples/molecule1.xml">&lt;cml title="schematic molecule example"&gt;<br/>  &lt;molecule id="dummyId"&gt;<br/>    &lt;atomArray&gt;<br/>      &lt;atom id="a1" elementType="C" hydrogenCount="0" x2="6.1964" y2="8.988"&gt;&lt;/atom&gt;<br/>      &lt;atom id="a2" elementType="C" hydrogenCount="0" x2="6.1964" y2="7.587"&gt;&lt;/atom&gt;<br/>      &lt;atom id="a3" elementType="C" hydrogenCount="2" x2="4.983" y2="6.887"&gt;&lt;/atom&gt;<br/><br/>      &lt;atom id="a28" elementType="C" hydrogenCount="3" x2="15.777" y2="6.554"&gt;&lt;/atom&gt;<br/>      &lt;atom id="a29" elementType="O" hydrogenCount="0" x2="13.388" y2="6.188"&gt;&lt;/atom&gt;<br/>    &lt;/atomArray&gt;<br/>    &lt;bondArray&gt;<br/>      &lt;bond atomRefs2="a1 a2" order="1"&gt;&lt;/bond&gt;<br/>      &lt;bond atomRefs2="a2 a3" order="1"&gt;&lt;/bond&gt;<br/>      &lt;bond atomRefs2="a3 a4" order="1"&gt;&lt;/bond&gt;<br/><br/>      &lt;bond atomRefs2="a11 a15" order="1"&gt;&lt;/bond&gt;<br/>      &lt;bond atomRefs2="a12 a18" order="1"&gt;<br/>        &lt;bondStereo&gt;W&lt;/bondStereo&gt;<br/>      &lt;/bond&gt;<br/>      &lt;bond atomRefs2="a2 a19" order="1"&gt;<br/>        &lt;bondStereo&gt;W&lt;/bondStereo&gt;<br/>      &lt;/bond&gt;<br/>      &lt;bond atomRefs2="a5 a20" order="2"&gt;&lt;/bond&gt;<br/>      &lt;bond atomRefs2="a17 a21" order="1"&gt;&lt;/bond&gt;<br/>      &lt;bond atomRefs2="a21 a22" order="1"&gt;&lt;/bond&gt;<br/><br/>      &lt;bond atomRefs2="a10 a9" order="1"&gt;&lt;/bond&gt;<br/>      &lt;bond atomRefs2="a16 a29" order="2"&gt;&lt;/bond&gt;<br/>    &lt;/bondArray&gt;<br/>  &lt;/molecule&gt;<br/>&lt;/cml&gt;</div>
         </xsd:documentation>
         <xsd:documentation>
           <div xmlns="" class="curation">Revised content model to allow any order of lengths, angles, torsions 2003-01-01. </div>
         </xsd:documentation>
         <xsd:documentation>
           <div xmlns="" class="curation">Added role attribute 2003-03-19. </div>
         </xsd:documentation>
      </xsd:annotation>


      <xsd:complexType><xsd:sequence><xsd:element ref="metadataList" minOccurs="0" maxOccurs="unbounded"/><xsd:element ref="formula" minOccurs="0"/><xsd:element ref="identifier" minOccurs="0"/><xsd:element ref="name" minOccurs="0" maxOccurs="unbounded"/><xsd:element ref="symmetry" minOccurs="0"/><xsd:element ref="crystal" minOccurs="0"/><xsd:choice>
             <xsd:element ref="molecule" minOccurs="0" maxOccurs="unbounded"/>
             <xsd:sequence>
               <xsd:element ref="atomArray"/>
               <xsd:element ref="bondArray" minOccurs="0"/>
               <xsd:element ref="electron" minOccurs="0" maxOccurs="unbounded"/>
               <xsd:choice minOccurs="0" maxOccurs="unbounded">
                 <xsd:element ref="length"/>
                 <xsd:element ref="angle"/>
                 <xsd:element ref="torsion"/>
                 </xsd:choice>
             </xsd:sequence>
           </xsd:choice><xsd:sequence minOccurs="0" maxOccurs="unbounded">
             <xsd:element ref="scalar" minOccurs="0" maxOccurs="unbounded"/>
             <xsd:element ref="array" minOccurs="0" maxOccurs="unbounded"/>
             <xsd:element ref="matrix" minOccurs="0" maxOccurs="unbounded"/>
             <xsd:element ref="list" minOccurs="0" maxOccurs="unbounded"/>
           </xsd:sequence></xsd:sequence><xsd:attributeGroup ref="dictRef"/><xsd:attributeGroup ref="convention"/><xsd:attributeGroup ref="title"/><xsd:attributeGroup ref="id"/><xsd:attributeGroup ref="ref"/><xsd:attribute name="formula" type="formulaType">
           <xsd:annotation>
             <xsd:documentation>
            <p xmlns="">
        The <tt>formula</tt> attribute should only be used for simple formulae (i.e.
        without brackets or other nesting for which the <a href="el.formula">formula</a>
        child should be used. The attribute might be used as a check on the child
        elements or for ease of representation.</p>
             </xsd:documentation>
           </xsd:annotation>
         </xsd:attribute><xsd:attribute name="count" type="positiveNumberType">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">The count for the molecule. </div>
               <div xmlns="" class="description">No formal default but assumed to be 1. Fractional values are allowed to describe variable stoichiometry. </div>
             </xsd:documentation>
           </xsd:annotation>
         </xsd:attribute><xsd:attribute name="chirality">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">The chirality of the complete system. </div>
               <div xmlns="" class="description">This is being actively investigated by a IUPAC committee (2002) so the convention is likely to change. No formaldefault. </div>
             </xsd:documentation>
           </xsd:annotation>
           <xsd:simpleType>
             <xsd:restriction base="xsd:string">
               <xsd:enumeration value="enantiomer"/>
               <xsd:enumeration value="racemate"/>
               <xsd:enumeration value="unknown"/>
               <xsd:enumeration value="other"/>
             </xsd:restriction>
           </xsd:simpleType>
         </xsd:attribute><xsd:attribute id="el.molecule.formalCharge" name="formalCharge" type="formalChargeType">
            <xsd:annotation>
               <xsd:documentation>
                 <div xmlns="" class="summary">The formalCharge on the molecule. </div>
                 <div xmlns="" class="description">NOT the calculated charge or oxidation state.
               This attribute should be used when it is impossible or artificial to assign charges
               to each atom, as in coordination complexes. It is then required that <b>all</b>
               atom formalCharge attributes are omitted. No formal default, but assumed to be zero if omitted. It may become good practice to include it.
                 </div>
               </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute id="el.molecule.spinMultiplicity" name="spinMultiplicity" type="xsd:positiveInteger">
            <xsd:annotation>
               <xsd:documentation>
               <div xmlns="" class="summary">The spin multiplicity for the molecule. </div>
               <div xmlns="" class="description"><p>This attribute gives the spin multiplicity of the molecule
               and is independent of any atomic information. No default, and it may take any positive integer
               value (though values are normally between 1 and 5)</p> 
               </div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute><xsd:attribute id="el.molecule.symmetryOriented" name="symmetryOriented" type="xsd:boolean">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">Is the molecule oriented to the symmetry. </div>
               <div xmlns="" class="description"><p>No formal default, but a molecule is assumed to be oriented according to any
             &lt;symmetry&gt; children. This is required for crystallographic data,
             but some systems for isolated molecules allow specification of arbitrary
             Cartesian or internal coordinates, which must be fitted or refined to
             a prescribed symmetry. In this case the attribute value is <tt>false</tt>.
             </p>
             </div>
             </xsd:documentation>
           </xsd:annotation>
         </xsd:attribute><xsd:attribute id="el.molecule.role" name="role" type="xsd:string">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">Role of the molecule</div>
               <div xmlns="" class="description"><p>No formal semantics (yet). The role describes the purpose of the molecule element at this stage in the information. Examples can be "conformation", "dynamicsStep", "vibration", "valenceBondIsomer", etc. This attribute may be used by applications to determine how to present a set of molecule elements.</p>
             </div>
             </xsd:documentation>
           </xsd:annotation>
         </xsd:attribute><xsd:attribute name="velocityUnits" id="molecule.cmlcomp.att.velocityUnits" type="xsd:float">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">units for velocities on molecule or atoms.</div>
            <div xmlns="">This is a CCML extension to core CML.</div>
            <div xmlns=""><p>If any velocities are given for this molecule of its descendants, this attribute MUST be given. There are no defaults and all objects in this molecule must use the same units.</p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attribute name="vx" id="molecule.cmlcomp.att.vx" type="xsd:float">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">velocity along the Cartesian X axis.</div>
            <div xmlns=""><p>This is a CCML extension to core CML.</p></div>
            <div xmlns=""><p>Units MUST be given in velocityUnits; there are NO defaults.</p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attribute name="vy" id="molecule.cmlcomp.att.vy" type="xsd:float">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">velocity along the Cartesian Y axis.</div>
            <div xmlns=""><p>This is a CCML extension to core CML.</p></div>
            <div xmlns=""><p>Units MUST be given in velocityUnits; there are NO defaults.</p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attribute name="vz" id="molecule.cmlcomp.att.vz" type="xsd:float">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">velocity along the Cartesian Z axis.</div>
            <div xmlns=""><p>This is a CCML extension to core CML.</p></div>
            <div xmlns=""><p>Units MUST be given in velocityUnits; there are NO defaults.</p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attribute name="vxyz" id="molecule.cmlcomp.att.vxyz" type="vector3Type">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">velocity as a vector</div>
            <div xmlns=""><p>This is a CCML extension to core CML.</p></div>
            <div xmlns=""><p>Units MUST be given in velocityUnits; there are NO defaults.</p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute></xsd:complexType>
   </xsd:element><xsd:element name="name" id="el.name">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A string identifying a molecule, atom or (possibly) other elements. 
      </div>
      <div xmlns="" class="description">
            <p><tt>name</tt> is used for chemical names (formal and trivial)
            for molecules and also for identifiers such as CAS registry and RTECS. 
            It can also be used for labelling atoms. It should be used
            in preference to the <tt>title</tt>
            attribute because it is repeatable and can be linked to a
            dictionary.
</p>
<p>Constraining patterns can be described in the dictionary and used to 
validate <tt>name</tt>s.</p>
      </div>
      <div xmlns="" class="example" href="cmlCore/examples/name1.xml">&lt;cml title="name example"&gt;<br/>  &lt;molecule id="aspirin"&gt;<br/>    &lt;name convention="INN"&gt; name="builtin" type="xsd:string"in&lt;/name&gt;<br/>    &lt;name convention="IUPAC"&gt;2-acetoxybenzoic acid&lt;/name&gt;<br/>    &lt;name convention="trivial"&gt;acetylsalicylic acid&lt;/name&gt;<br/>  &lt;/molecule&gt;<br/>&lt;/cml&gt;</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType><xsd:simpleContent>
      <xsd:extension base="xsd:string">
        <xsd:attributeGroup ref="id"/>
        <xsd:attributeGroup ref="convention"/>
        <xsd:attributeGroup ref="dictRef"/> 
      </xsd:extension>
    </xsd:simpleContent></xsd:complexType>
</xsd:element><xsd:element name="property" id="el.property">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A container for a property. 
      </div>
      <div xmlns="" class="description">
        <p><tt>property</tt> can contain one or more children, usually <tt>scalar</tt>, <tt>array</tt> or <tt>matrix</tt>. The <tt>dictRef</tt> attribute is required, even if there is a single scalar child with the same dictRef. The property may have a different dictRef from the child, thus providing an extension mechanism.
        </p>
        <p>Properties may have a <tt>state</tt> attribute to distinguish the state of matter</p>
      </div>
      <div xmlns="" class="example" href="cmlCore/examples/property1.xml">&lt;molecule&gt;<br/>  &lt;name&gt;buckminsteremptierene&lt;/name&gt;<br/>  &lt;list&gt;<br/>  &lt;property title="critical temperature" dictRef="prop:crittemp"&gt;<br/>    &lt;scalar units="unit:celsius"&gt;123&lt;/scalar&gt;<br/>  &lt;/property&gt;<br/>  &lt;/list&gt;<br/>&lt;/molecule&gt;</div>
    </xsd:documentation>
  </xsd:annotation>

  <xsd:complexType><xsd:sequence><xsd:element ref="metadataList" minOccurs="0" maxOccurs="unbounded"/><xsd:element ref="name" minOccurs="0" maxOccurs="unbounded"/><xsd:choice minOccurs="0" maxOccurs="unbounded">
        <xsd:element ref="scalar"/>
        <xsd:element ref="array"/>
        <xsd:element ref="matrix"/>

      </xsd:choice><xsd:sequence>
  <xsd:element ref="parameter"/>
</xsd:sequence></xsd:sequence><xsd:attributeGroup ref="dictRef"/><xsd:attributeGroup ref="convention"/><xsd:attributeGroup ref="title"/><xsd:attributeGroup ref="id"/><xsd:attributeGroup ref="ref"/><xsd:attribute name="role" id="property.att.role" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          <div xmlns="">
            <p>The role of the property. Semantics are not yet controlled but could include thermochemistry, kinetics or other common properties.</p>
          </div>
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute><xsd:attribute name="state" type="stateType" id="property.att.state">
      <xsd:annotation>
        <xsd:documentation>
          <div xmlns="">
            <p>The role of the property. Semantics are not yet controlled but could include thermochemistry, kinetics or other common properties.</p>
          </div>
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute></xsd:complexType>
</xsd:element><xsd:element name="propertyList" id="el.propertyList">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A container for one or more properties. 
      </div>
      <div xmlns="" class="description">
        <p><tt>propertyList</tt> can contain several properties. These include (but are not limited to observations, or numeric quantities.
        </p>
      </div>
      <div xmlns="" class="example" href="cmlCore/examples/propertyList1.xml">&lt;molecule&gt;<br/>  &lt;name&gt;penguinone&lt;/name&gt;<br/>  &lt;list&gt;<br/>  &lt;propertyList&gt;<br/>    &lt;property title="colour"&gt;<br/>      &lt;scalar dictRef="prop:color"&gt;black&lt;/scalar&gt;<br/>    &lt;/property&gt;<br/>    &lt;property title="electric dipole moment"&gt;<br/>      &lt;scalar dictRef="ccml:edipole" units="unit:debye"&gt;1.23&lt;/scalar&gt;<br/>    &lt;/property&gt;<br/>  &lt;/propertyList&gt;<br/>  &lt;/list&gt;<br/>&lt;/molecule&gt;</div>
    </xsd:documentation>
  </xsd:annotation>

  <xsd:complexType><xsd:sequence><xsd:element ref="metadataList" minOccurs="0" maxOccurs="unbounded"/><xsd:element ref="name" minOccurs="0" maxOccurs="unbounded"/><xsd:choice minOccurs="0" maxOccurs="unbounded">
        <xsd:element ref="property"/>
        <xsd:element ref="observation"/>
      </xsd:choice></xsd:sequence><xsd:attributeGroup ref="dictRef"/><xsd:attributeGroup ref="convention"/><xsd:attributeGroup ref="title"/><xsd:attributeGroup ref="id"/><xsd:attributeGroup ref="ref"/><xsd:attribute name="role" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          <div xmlns="">
            <p>The role of the propertyList. Semantics are not yet controlled but could include thermochemistry, kinetics or other common properties.</p>
          </div>
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute></xsd:complexType>
</xsd:element><xsd:element name="symmetry" id="el.symmetry">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">Molecular, crystallographic or other symmetry. </div>
      <div xmlns="" class="description">
            <p>
         <tt>symmetry</tt> provides a label and/or symmetry operations for molecules
         or crystals. Point and spacegroups can be specified by strings, though these are not 
         enumerated, because of variability in syntax (spaces, case-sensitivity, etc.),
         potential high symmetries (e.g. TMV disk is D17) and
         non-standard spacegroup settings. Provision is made for explicit symmetry operations
         through &lt;matrix&gt; child elements.</p>
         <p>By default the axes of symmetry are defined by the symbol - thus C2v requires
         z to be the unique axis, while P21/c requires b/y. Spacegroups imply the semantics
         defined in International Tables for Crystallography, (Int Union for Cryst., Munksgaard).
         Point groups are also defined therein. </p>
         <p>The element may also be used to give a label for the symmetry species (irreducible
         representation) such as "A1u" for a vibration or orbital.
         </p>
         <p>The matrices should be 3x3 for point group operators and 3x4 for spacegroup operators.
         The use of crystallographic notation ("x,1/2+y,-z") is not supported - this would
         be &lt;matrix&gt;1 0 0 0.0   0 1 0 0.5  0 0 1 0.0&lt;matrix&gt;.</p>
         <p>The default convention for point group symmetry is <tt>Schoenflies</tt> and for
         spacegroups is "H-M". Other conventions (e.g. "Hall") must be specfied through
         the <tt>convention</tt> attribute.</p>
         <p>This element implies that the Cartesians or fractional coordinates in a molecule
         are oriented appropriately. In some cases it may be useful to specify the symmetry of
         an arbitarily oriented molecule and the &lt;molecule&gt; element has the attribute
         <tt>symmetryOriented</tt> for this purpose.</p>
        </div>
        <div xmlns="" class="example" href="cmlCore/examples/symmetry1.xml">&lt;cml title="symmetry example 1"&gt;<br/>&lt;symmetry pointGroup="C2v" id="s1"&gt;<br/>  &lt;matrix id="e" rows="3" columns="3" dataType="xsd:float" matrixType="rotation33"&gt;<br/>    1 0 0<br/>    0 1 0<br/>    0 0 1&lt;/matrix&gt;<br/>  &lt;matrix id="c2" rows="3" columns="3" dataType="xsd:float" matrixType="rotation33"&gt;<br/>    -1 0 0<br/>    0 -1 0<br/>    0 0 1&lt;/matrix&gt;<br/>  &lt;matrix id="sx" rows="3" columns="3" dataType="xsd:float" matrixType="rotation33"&gt;<br/>    -1 0 0<br/>    0 1 0<br/>    0 0 1&lt;/matrix&gt;<br/>  &lt;matrix id="sy" rows="3" columns="3" dataType="xsd:float" matrixType="rotation33"&gt;<br/>    1 0 0<br/>    0 -1 0<br/>    0 0 1&lt;/matrix&gt;<br/>&lt;/symmetry&gt;<br/>&lt;/cml&gt;</div>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:complexType><xsd:sequence><xsd:element ref="matrix" minOccurs="0" maxOccurs="unbounded"/></xsd:sequence><xsd:attributeGroup ref="dictRef"/><xsd:attributeGroup ref="convention"/><xsd:attributeGroup ref="title"/><xsd:attributeGroup ref="id"/><xsd:attribute name="pointGroup" type="xsd:string">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">A point group. </div>
               <div xmlns="" class="description">No fixed semantics, though Schoenflies is recommended over Hermann-Mauguin. We may provide a controlled-extensible list in the future.
               </div>
             </xsd:documentation>
           </xsd:annotation>
         </xsd:attribute><xsd:attribute name="spaceGroup" type="xsd:string">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">A point group. </div>
               <div xmlns="" class="description">No fixed semantics, though Hermann-Mauguin or Hall is recommended over Schoenflies. We may provide a controlled-extensible list in the future.
               </div>
             </xsd:documentation>
           </xsd:annotation>
         </xsd:attribute><xsd:attribute name="irreducibleRepresentation" type="xsd:string">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">A symmetry species. </div>
               <div xmlns="" class="description">No fixed semantics, though we may provide a controlled-extensible list in the future.
               </div>
             </xsd:documentation>
           </xsd:annotation>
         </xsd:attribute><xsd:attribute name="number" type="xsd:nonNegativeInteger">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="curation">2003-03-30: added number attribute</div>
               <div xmlns="" class="summary">The rotational symmetry number</div>
               <div xmlns="" class="description">Used for calculation of entropy, etc.
               </div>
             </xsd:documentation>
           </xsd:annotation>
         </xsd:attribute></xsd:complexType>
   </xsd:element><xsd:element name="torsion" id="el.torsion">  
   <xsd:annotation>
      <xsd:documentation>
   <div xmlns="" class="summary">A torsion angle ("dihedral") between 4 distinct atoms.
   </div>
   <div xmlns="" class="description">
         <p>The atoms need not
     be formally bonded. It can be used for:</p>
         <ul>
            <li>Recording experimentally determined torsion angles (e.g. in
     a crystallographic paper).</li>
            <li>Providing the torsion component for internal coordinates (e.g.
     z-matrix).</li>
         </ul>
         <p>Note that the order of atoms is important.</p>
   </div>
   <div xmlns="" class="example" href="cmlCore/examples/torsion1.xml">&lt;molecule id="m1"&gt;<br/>  &lt;atomArray atomID="a1 a2 a3 a4"&gt;&lt;/atomArray&gt;<br/>  &lt;torsion atomRefs4="a4 a2 a3 a1" units="degrees"&gt;123&lt;/torsion&gt;<br/>&lt;/molecule&gt;</div>
      </xsd:documentation>
   </xsd:annotation>
   <xsd:complexType><xsd:simpleContent>
       <xsd:extension base="torsionAngleType">
         <xsd:attributeGroup ref="tit_id_conv_dictGroup"/>
         <xsd:attributeGroup ref="atomRefs4"/>
         <xsd:attributeGroup ref="units"/>
         <xsd:attributeGroup ref="errorValue"/>
         <xsd:attributeGroup ref="errorBasis"/>
         <xsd:attributeGroup ref="min"/>
         <xsd:attributeGroup ref="max"/>
         <xsd:attributeGroup ref="ref">

            </xsd:attributeGroup>
       </xsd:extension>
     </xsd:simpleContent></xsd:complexType>
</xsd:element><xsd:simpleType name="angleUnitsType" id="st.angleUnitsType">  
   <xsd:annotation>
     <xsd:documentation>
       <div xmlns="" class="summary">an enumeration of allowed angle units.</div>
      <div xmlns="" class="description">
      </div>
      <div xmlns="" class="example">
        <pre>
        </pre>
      </div>
     </xsd:documentation>
   </xsd:annotation>
   <xsd:restriction base="xsd:string">
     <xsd:enumeration value="degrees"/>
     <xsd:enumeration value="radians"/>
   </xsd:restriction>
 </xsd:simpleType><xsd:simpleType name="atomRefType" id="st.atomRefType">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A reference to an existing atom.</div>
      <div xmlns="" class="example" href="cmlCore/examples/atomRefType1.xml">&lt;cml title="atomRef example"&gt;<br/>  &lt;molecule id="m1"&gt;<br/>    &lt;atomArray&gt;<br/>      &lt;atom id="a1"&gt;&lt;/atom&gt;<br/>    &lt;/atomArray&gt;<br/>    &lt;electron id="e1" atomRef="a1"&gt;&lt;/electron&gt;<br/>  &lt;/molecule&gt;<br/>&lt;/cml&gt;</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="xsd:string">
    <xsd:pattern value="\s*[A-Za-z_][A-Za-z0-9\-:_]*\s*"/>
  </xsd:restriction>
</xsd:simpleType><xsd:simpleType name="atomRefs2Type" id="st.atomRefs2Type">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A reference to two distinct existing atoms in order.</div>
      <div xmlns="" class="example" href="cmlCore/examples/atomRefs21.xml">&lt;cml title="atomRefs2 example"&gt;<br/>  &lt;molecule id="m1"&gt;<br/>    &lt;atomArray&gt;<br/>      &lt;atom id="a1"&gt;&lt;/atom&gt;  <br/>      &lt;atom id="a2"&gt;&lt;/atom&gt;<br/>    &lt;/atomArray&gt;<br/>    &lt;bondArray&gt;<br/>      &lt;bond atomRefs2="a1 a2"&gt;&lt;/bond&gt;<br/>    &lt;/bondArray&gt;<br/>  &lt;/molecule&gt;<br/>&lt;/cml&gt;</div>
    </xsd:documentation>
      </xsd:annotation>

      <xsd:restriction base="xsd:string">
         <xsd:pattern value="\s*\S+\s+\S+\s*"/>
      </xsd:restriction>
   </xsd:simpleType><xsd:simpleType name="atomRefs3Type" id="st.atomRefs3Type">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">A reference to three distinct existing atoms in order.</div>
      <div xmlns="" class="example" href="cmlCore/examples/atomRefs31.xml">&lt;cml title="atomRefs3 example"&gt;<br/>  &lt;molecule id="m1"&gt;<br/>    &lt;atomArray&gt;<br/>      &lt;atom id="a1"&gt;&lt;/atom&gt;  <br/>      &lt;atom id="a2"&gt;&lt;/atom&gt;<br/>      &lt;atom id="a3"&gt;&lt;/atom&gt;<br/>    &lt;/atomArray&gt;<br/>    &lt;angle atomRefs3="a1 a2 a3" units="degrees"&gt;123.4&lt;/angle&gt;<br/>  &lt;/molecule&gt;<br/>&lt;/cml&gt;</div>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:string">
         <xsd:pattern value="\s*(\S+\s+){2}\S+\s*"/>
      </xsd:restriction>
   </xsd:simpleType><xsd:simpleType name="atomRefs4Type" id="st.atomRefs4Type">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">A reference to four distinct existing atoms in order.</div>
      <div xmlns="" class="example" href="cmlCore/examples/atomRefs41.xml">&lt;cml title="atomRefs4 example"&gt;<br/>  &lt;molecule id="m1"&gt;<br/>    &lt;atomArray&gt;<br/>      &lt;atom id="a1"&gt;&lt;/atom&gt;  <br/>      &lt;atom id="a2"&gt;&lt;/atom&gt;<br/>      &lt;atom id="a3"&gt;&lt;/atom&gt;<br/>     &lt;atom id="a4"&gt;&lt;/atom&gt;<br/>    &lt;/atomArray&gt;<br/>    &lt;torsion atomRefs4="a1 a2 a3 a4" units="degrees"&gt;123.4&lt;/torsion&gt;<br/>  &lt;/molecule&gt;<br/>&lt;/cml&gt;</div>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:string">
         <xsd:pattern value="\s*(\S+\s+){3}\S+\s*"/>
      </xsd:restriction>
   </xsd:simpleType><xsd:simpleType name="atomRefArrayType" id="st.atomRefArrayType">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">An array of atomRefs.</div>
      <div xmlns="" class="description">
            <p>The atomRefs
         cannot be schema- or schematron-validated. Instances of this type will
         be used in array-style representation of bonds and atomParitys.
         It can also be used for arrays of atomIDTypes such as in complex setereochemistry,
         geometrical definitions, atom groupings, etc.</p> </div>
      <div xmlns="" class="example" href="cmlCore/examples/atomRefArrayType1.xml">&lt;cml title="atomArray example"&gt;<br/>  &lt;molecule id="m1"&gt;<br/>    &lt;atomArray atomID="a2 a4 a6" elementType="O N S"&gt;&lt;/atomArray&gt;<br/>  &lt;/molecule&gt;<br/>&lt;/cml&gt;</div>
         </xsd:documentation>
         <xsd:appinfo>
         </xsd:appinfo>
      </xsd:annotation>
      <xsd:list itemType="atomRefType"/>
   </xsd:simpleType><xsd:simpleType name="atomIDType" id="st.atomIDType">  
   <xsd:annotation>
      <xsd:documentation>
   <div xmlns="" class="summary">An identifier for an atom.</div>
   <div xmlns="" class="description">
         <p>Of the form prefix:suffix where prefix and suffix
         are purely alphanumeric (with _ and -) and prefix
         is optional. This is similar to XML IDs (and we promote
         this as good practice for atomIDs. Other punctuation and 
         whitespace is forbidden, so IDs from (say) PDB files are
         not satisfactory.</p>
         <p>The prefix is intended to form a pseudo-namespace so that
         atom IDs in different molecules may have identical suffixes. 
         It is also useful if the prefix is the ID for the molecule
         (though this clearly has its limitation). Atom IDs should not
         be typed as XML IDs since they may not validate.</p>
         </div>
   <div xmlns="" class="example" href="cmlCore/examples/atomIDType1.xml">&lt;cml title="example of IDs on atoms"&gt;<br/>  &lt;molecule id="m1"&gt;<br/>    &lt;atomArray&gt;<br/><br/>      &lt;atom id="a2" elementType="O"&gt;&lt;/atom&gt;<br/>    &lt;/atomArray&gt;<br/>  &lt;/molecule&gt;<br/>  &lt;molecule id="m2"&gt;<br/>    &lt;atomArray&gt;<br/><br/>      &lt;atom id="a2" elementType="O"&gt;&lt;/atom&gt;<br/>    &lt;/atomArray&gt;<br/>  &lt;/molecule&gt;<br/>&lt;/cml&gt;</div>
      </xsd:documentation>
      <xsd:appinfo>
      </xsd:appinfo>
   </xsd:annotation>
   <xsd:restriction base="xsd:string">
      <xsd:pattern value="[A-Za-z0-9_\-]+(:[A-Za-z0-9_\-]+)?"/>
   </xsd:restriction>
</xsd:simpleType><xsd:simpleType name="bondRefType" id="st.bondRefType">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A reference to an existing bond.</div>
           <div xmlns="" class="general"><p>A reference to a bond may be made by atoms (e.g. for multicentre or pi-bonds), electrons (for annotating reactions or describing electronic properties) or possibly other bonds
           (no examples yet). The semantics are relatively flexible.</p>
           </div>

      <div xmlns="" class="example" href="cmlCore/examples/bond1.xml">&lt;cml title="bondArray example"&gt;<br/>  &lt;bondArray&gt;<br/>    &lt;bond id="b1" atomRefs2="a3 a8" order="D"&gt;<br/>      &lt;electron bondRef="b1"&gt;&lt;/electron&gt;<br/>      &lt;bondStereo&gt;C&lt;/bondStereo&gt;<br/>    &lt;/bond&gt;<br/>    &lt;bond id="b2" atomRefs2="a3 a8" order="S"&gt;<br/>      &lt;bondStereo convention="MDL" conventionValue="6"&gt;&lt;/bondStereo&gt;<br/>    &lt;/bond&gt;<br/>  &lt;/bondArray&gt;<br/>&lt;/cml&gt;</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="xsd:string">
    <xsd:pattern value="\s*\S+\s*"/>
  </xsd:restriction>
</xsd:simpleType><xsd:simpleType name="bondRefArrayType" id="st.bondRefArrayType">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">An array of references to bonds.</div>
      <div xmlns="" class="description">
            <p>The references cannot (yet)
         cannot be schema- or schematron-validated. Instances of this type will
         be used in array-style representation of electron counts, etc.
         It can also be used for arrays of bondIDTypes such as in complex stereochemistry,
         geometrical definitions, bond groupings, etc.</p> </div>
      <div xmlns="" class="example">
       <pre>
       </pre>
      </div>
         </xsd:documentation>
         <xsd:appinfo>
         </xsd:appinfo>
      </xsd:annotation>
      <xsd:list itemType="bondRefType"/>
   </xsd:simpleType><xsd:simpleType name="elementTypeType" id="st.elementTypeType">   
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">Allowed <tt>elementType</tt> values.</div>
      <div xmlns="" class="description">
        <p>The periodic table (up to
         element number 118. In addition the following strings are allowed:
         <ul>
            <li><tt>Du</tt>. ("dummy") This does not correspond to a "real" atom and can 
         support a point in space or within a chemical graph.</li>
            <li><tt>R</tt>. ("R-group") This indicates that an atom or group of atoms could be attached at this point. </li>
         </ul>
         </p> 
      </div>
      <div xmlns="" class="example" href="cmlCore/examples/elementTypeType1.xml">&lt;cml title="elementType example"&gt;<br/>  &lt;atomArray&gt;<br/>    &lt;atom id="a1" elementType="C"&gt;&lt;/atom&gt;<br/>    &lt;atom id="a2" elementType="N"&gt;&lt;/atom&gt;<br/>    &lt;atom id="a3" elementType="Pb"&gt;&lt;/atom&gt;<br/>    &lt;atom id="a4" elementType="Dummy"&gt;&lt;/atom&gt;<br/>  &lt;/atomArray&gt;<br/>&lt;/cml&gt;</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:union>
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:enumeration value="Ac"/>
            <xsd:enumeration value="Al"/>
            <xsd:enumeration value="Ag"/>
            <xsd:enumeration value="Am"/>
            <xsd:enumeration value="Ar"/>
            <xsd:enumeration value="As"/>
            <xsd:enumeration value="At"/>
            <xsd:enumeration value="Au"/>
            <xsd:enumeration value="B"/>
            <xsd:enumeration value="Ba"/>
            <xsd:enumeration value="Bh"/>
            <xsd:enumeration value="Bi"/>
            <xsd:enumeration value="Be"/>
            <xsd:enumeration value="Bk"/>
            <xsd:enumeration value="Br"/>
            <xsd:enumeration value="C"/>
            <xsd:enumeration value="Ca"/>
            <xsd:enumeration value="Cd"/>
            <xsd:enumeration value="Ce"/>
            <xsd:enumeration value="Cf"/>
            <xsd:enumeration value="Cl"/>
            <xsd:enumeration value="Cm"/>
            <xsd:enumeration value="Co"/>
            <xsd:enumeration value="Cr"/>
            <xsd:enumeration value="Cs"/>
            <xsd:enumeration value="Cu"/>
            <xsd:enumeration value="Db"/>
            <xsd:enumeration value="Dy"/>
            <xsd:enumeration value="Er"/>
            <xsd:enumeration value="Es"/>
            <xsd:enumeration value="Eu"/>
            <xsd:enumeration value="F"/>
            <xsd:enumeration value="Fe"/>
            <xsd:enumeration value="Fm"/>
            <xsd:enumeration value="Fr"/>
            <xsd:enumeration value="Ga"/>
            <xsd:enumeration value="Gd"/>
            <xsd:enumeration value="Ge"/>
            <xsd:enumeration value="H">
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">Any isotope of hydrogen.</div>
            <div xmlns="" class="description">
<p>There are no special element symbols for D and T which should use the <tt>isotope</tt> attribute. </p></div>
    </xsd:documentation>
  </xsd:annotation>
            </xsd:enumeration>
            <xsd:enumeration value="He"/>
            <xsd:enumeration value="Hf"/>
            <xsd:enumeration value="Hg"/>
            <xsd:enumeration value="Ho"/>
            <xsd:enumeration value="Hs"/>
            <xsd:enumeration value="I"/>
            <xsd:enumeration value="In"/>
            <xsd:enumeration value="Ir"/>
            <xsd:enumeration value="K"/>
            <xsd:enumeration value="Kr"/>
            <xsd:enumeration value="La"/>
            <xsd:enumeration value="Li"/>
            <xsd:enumeration value="Lr"/>
            <xsd:enumeration value="Lu"/>
            <xsd:enumeration value="Md"/>
            <xsd:enumeration value="Mg"/>
            <xsd:enumeration value="Mn"/>
            <xsd:enumeration value="Mo"/>
            <xsd:enumeration value="Mt"/>
            <xsd:enumeration value="N"/>
            <xsd:enumeration value="Na"/>
            <xsd:enumeration value="Nb"/>
            <xsd:enumeration value="Nd"/>
            <xsd:enumeration value="Ne"/>
            <xsd:enumeration value="Ni"/>
            <xsd:enumeration value="No"/>
            <xsd:enumeration value="Np"/>
            <xsd:enumeration value="O"/>
            <xsd:enumeration value="Os"/>
            <xsd:enumeration value="P"/>
            <xsd:enumeration value="Pa"/>
            <xsd:enumeration value="Pb"/>
            <xsd:enumeration value="Pd"/>
            <xsd:enumeration value="Pm"/>
            <xsd:enumeration value="Po"/>
            <xsd:enumeration value="Pr"/>
            <xsd:enumeration value="Pt"/>
            <xsd:enumeration value="Pu"/>
            <xsd:enumeration value="Ra"/>
            <xsd:enumeration value="Rb"/>
            <xsd:enumeration value="Re"/>
            <xsd:enumeration value="Rf"/>
            <xsd:enumeration value="Rh"/>
            <xsd:enumeration value="Rn"/>
            <xsd:enumeration value="Ru"/>
            <xsd:enumeration value="S"/>
            <xsd:enumeration value="Sb"/>
            <xsd:enumeration value="Sc"/>
            <xsd:enumeration value="Se"/>
            <xsd:enumeration value="Sg"/>
            <xsd:enumeration value="Si"/>
            <xsd:enumeration value="Sm"/>
            <xsd:enumeration value="Sn"/>
            <xsd:enumeration value="Sr"/>
            <xsd:enumeration value="Ta"/>
            <xsd:enumeration value="Tb"/>
            <xsd:enumeration value="Tc"/>
            <xsd:enumeration value="Te"/>
            <xsd:enumeration value="Th"/>
            <xsd:enumeration value="Ti"/>
            <xsd:enumeration value="Tl"/>
            <xsd:enumeration value="Tm"/>
            <xsd:enumeration value="U"/>
            <xsd:enumeration value="Uun"/>
            <xsd:enumeration value="Uuu"/>
            <xsd:enumeration value="Uub"/>
            <xsd:enumeration value="Uut"/>
            <xsd:enumeration value="Uuq"/>
            <xsd:enumeration value="Uup"/>
            <xsd:enumeration value="Uuh"/>
            <xsd:enumeration value="Uus"/>
            <xsd:enumeration value="Uuo"/>
            <xsd:enumeration value="V"/>
            <xsd:enumeration value="W"/>
            <xsd:enumeration value="Xe"/>
            <xsd:enumeration value="Y"/>
            <xsd:enumeration value="Yb"/>
            <xsd:enumeration value="Zn"/>
            <xsd:enumeration value="Zr"/>
    
            <xsd:enumeration value="Dummy">
            </xsd:enumeration>
            <xsd:enumeration value="Du">
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A point or object with no chemical semantics.</div>
            <div xmlns="" class="description">
<p>Examples can be centroids, bond-midpoints, orienting "atoms" in small z-matrices. </p>
<p>Note "Dummy" has the same semantics but is now deprecated.</p></div>
    </xsd:documentation>
  </xsd:annotation>
            </xsd:enumeration>
            
            <xsd:enumeration value="R">
  <xsd:annotation>
    <xsd:documentation>
    
      <div xmlns="" class="summary">A point at which an atom or group might be attached.</div>
            <div xmlns="" class="description">
<p>Examples are abbreviated organic functional groups, Markush representations, polymers, unknown atoms, etc. Semantics may be determined by the <tt>role</tt> attribute on the atom. </p></div>
    </xsd:documentation>
  </xsd:annotation>
            </xsd:enumeration>
            
          </xsd:restriction>
        </xsd:simpleType>
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:pattern value="[A-Za-z]+:[A-Za-z][A-Za-z0-9\-]+"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:union>
   </xsd:simpleType><xsd:simpleType name="elementTypeArrayType" id="st.elementTypeArrayType">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">An array of elementTypes.</div>
      <div xmlns="" class="description">
            <p>Instances of this type will
         be used in array-style representation of atoms.</p> </div>
      <div xmlns="" class="example" href="cmlCore/examples/elementTypeArrayType1.xml">&lt;cml title="atomArray with elementTypes"&gt;<br/>  &lt;atomArray elementType="O N S Pb"&gt;&lt;/atomArray&gt;<br/>&lt;/cml&gt;</div>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:list itemType="elementTypeType"/>
   </xsd:simpleType><xsd:simpleType name="formalChargeType" id="st.formalChargeType">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">The formal charge on an atom.</div>
      <div xmlns="" class="description">
            <p>Used for electron-bookeeping.
         This has no relation to its
         calculated (fractional) charge.</p> </div>
      <div xmlns="" class="example" href="cmlCore/examples/formalChargeType1.xml">&lt;cml title="formalCharge example"&gt;<br/>  &lt;atomArray&gt;<br/>    &lt;atom id="a1" elementType="N" formalCharge="+1"&gt;&lt;/atom&gt;<br/>    &lt;atom id="a2" elementType="O" formalCharge="-1"&gt;&lt;/atom&gt;<br/>  &lt;/atomArray&gt;<br/>&lt;/cml&gt;</div>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:integer"/>
   </xsd:simpleType><xsd:simpleType name="formulaType" id="st.formulaType">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">A concise representation for a molecular formula.</div>
      <div xmlns="" class="description">
            <p>This MUST adhere to a whitespaced syntax so that it is trivially machine-parsable.
            Each element is followed by its count, and the string is optionally ended
            by a formal charge. NO brackets or other nesting is allowed.</p>
      </div>
      <div xmlns="" class="example" href="cmlCore/examples/formulaType1.xml">&lt;cml title="formulaType example (concise)"&gt;<br/>  &lt;list&gt;<br/>    &lt;formula id="methane" concise="C 1 H 4"&gt;&lt;/formula&gt;<br/>    &lt;formula id="chloroacetate" concise="Cl 1 H 2 C 2 O 2 -1"&gt;&lt;/formula&gt;<br/>    &lt;formula id="sodiumSulfate"&gt;<br/>      &lt;formula concise="H 2 O 1" count="10"&gt;&lt;/formula&gt;<br/>      &lt;formula concise="Na 1 +1" count="2"&gt;&lt;/formula&gt;<br/>      &lt;formula concise="S 1 O 4 -2"&gt;&lt;/formula&gt;<br/>    &lt;/formula&gt;<br/>  &lt;/list&gt;<br/>&lt;/cml&gt;</div>
         </xsd:documentation>
         <xsd:appinfo>
         </xsd:appinfo>
      </xsd:annotation>
      <xsd:restriction base="xsd:string">
         <xsd:pattern value="\s*([A-Z][a-z]?\s+[1-9][0-9]*)(\s+[A-Z][a-z]?\s+[1-9][0-9]*)*(\s+[-|+]?[0-9]+)?\s*"/>
      </xsd:restriction>
   </xsd:simpleType><xsd:simpleType name="hydrogenCountType" id="st.hydrogenCountType">
   <xsd:annotation>
      <xsd:documentation>
      <div xmlns="" class="summary">The total number of hydrogen atoms bonded to an atom.</div>
      <div xmlns="" class="description">
         <p>The total number of hydrogen atoms bonded to an atom, whether
      explicitly included as atoms or not. It is an error to have hydrogen count
      less than the explicit hydrogen count. There is no default value and no assumptions
      about hydrogen Count can be made if it is not given. </p>
         <p>If hydrogenCount is given on every atom, then the values can be summed to give
      the total hydrogenCount for the (sub)molecule. Because of this hydrogenCount
      should not be used where hydrogen atoms bridge 2 or more atoms.</p>
      </div>
      <div xmlns="" class="example" href="cmlCore/examples/atom1.xml">&lt;cml title="single atom example"&gt;<br/>&lt;atom id="a1" title="O3'" elementType="O" formalCharge="1" hydrogenCount="1" isotope="17" occupancy="0.7" x2="1.2" y2="2.3" x3="3.4" y3="4.5" z3="5.6" convention="ABC" dictRef="chem:atom"&gt;<br/>  &lt;scalar title="dipole" dictRef="d:dip" units="units:debye"&gt;0.2&lt;/scalar&gt;<br/>  &lt;atomParity atomRefs4="a3 a7 a2 a4"&gt;1&lt;/atomParity&gt;<br/>  &lt;electron id="e1" atomRef="a1" count="2"&gt;&lt;/electron&gt;<br/>&lt;/atom&gt;<br/>&lt;/cml&gt;</div>
      </xsd:documentation>
   </xsd:annotation>
   <xsd:restriction base="xsd:nonNegativeInteger"/>
</xsd:simpleType><xsd:simpleType name="isotopeType" id="st.isotopeType">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">The numeric representation of an isotope.</div>
      <div xmlns="" class="description">
            <p>In core CML this represents a single number; either the 
         combined proton/neutron count or a more accurate estimate of the 
         nuclear mass. This is admittedly fuzzy, and requires a more complex
         object (which can manage conventions, lists of isotopic masses, etc.)
         See <a href="el.isotope">isotope</a>.</p>
         <p>The default is "natural abundance" - whatever that can be interpreted
         as.</p>
            <p>Delta values (i.e. deviations from the most abundant istopic mass)
         are never allowed.</p>
         </div>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:float">
         <xsd:minInclusive value="0.0"/>
         <xsd:maxInclusive value="99999999999.0"/>
      </xsd:restriction>
   </xsd:simpleType><xsd:simpleType name="nonNegativeAngleType" id="st.nonNegativeAngleType">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A non-signed angle, such as a bond angle. 
      Note that we also provide positiveAngleType (e.g. for cell angles) and
      torsionAngleType for - guess what - <a href="el.torsion">torsion</a>.</div>
      <div xmlns="" class="description">
        <p>Re-used by <a href="el.angle">angle</a></p>
      </div>
      <div xmlns="" class="example" href="cmlCore/examples/nonNegativeAngleType.xml">&lt;angle units="degrees" atomRefs3="a1 a2 a3"&gt;123.4&lt;/angle&gt;</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="xsd:float">
    <xsd:minInclusive value="0.0"/>
    <xsd:maxInclusive value="180.0"/>
  </xsd:restriction>
</xsd:simpleType><xsd:simpleType name="nonHydrogenCountType" id="st.nonHydrogenCountType">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">The number of non-hydrogen atoms attached to an atom.</div>
      <div xmlns="" class="description">
            <p>Obsolete in core CML. Only useful in CML queries</p> 
            </div>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:nonNegativeInteger"/>
   </xsd:simpleType><xsd:simpleType name="positiveAngleType" id="st.positiveAngleType">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A non-signed angle, such as a cell angle. 
      Note that we also provide nonNegativeAngleType (e.g. for bond angles).</div>
      <div xmlns="" class="description">
        <p>Re-used by <a href="el.crystal">crystal</a></p>
      </div>
      <div xmlns="" class="example" href="cmlCore/examples/positiveAngleType.xml">&lt;cml title="positiveAngleType example"&gt;<br/>  &lt;list&gt;<br/>    &lt;scalar title="alpha" units="units:degree"&gt;70.123&lt;/scalar&gt;<br/>    &lt;scalar title="beta" units="units:degree"&gt;80.456&lt;/scalar&gt;<br/>    &lt;scalar title="gamma" units="units:degree"&gt;90.789&lt;/scalar&gt;<br/>  &lt;/list&gt;<br/>&lt;/cml&gt;</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="xsd:float">
    <xsd:minExclusive value="0.0"/>
    <xsd:maxInclusive value="180.0"/>
  </xsd:restriction>
</xsd:simpleType><xsd:simpleType name="occupancyType" id="st.occupancyType">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">Occupancy of an atomic site.</div>
      <div xmlns="" class="description">
            <p> Primarily for crystallography. Values
         outside 0-1 are not allowed.</p> 
         </div>
      <div xmlns="" class="example">See <a href="el.atom">atom</a>.
      </div>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:float">
         <xsd:minInclusive value="0"/>
         <xsd:maxInclusive value="1"/>
      </xsd:restriction>
   </xsd:simpleType><xsd:simpleType name="orderArrayType" id="st.orderArrayType">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">An array of bond orders.</div>
      <div xmlns="" class="description">
      <p> (seeAlso <a href="st.orderType">orderType</a>)</p> </div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:list itemType="orderType"/>
</xsd:simpleType><xsd:simpleType name="orderType" id="st.orderType">  
      <xsd:annotation>
         <xsd:documentation>
      <div xmlns="" class="summary">Bond order (as a string).</div>
      <div xmlns="" class="description">
            <p>This is purely conventional and used
       for bond/electron counting. There is no default value. 
         The emptyString attribute can be used to indicate a bond of 
         unknown or unspecified type. The interpretation of this is outside
         the scope of CML-based algorithms. It may be accompanied by a <tt>convention</tt>
         attribute on the <tt>bond</tt> which links to a dictionary.
         Example: <tt>&lt;bond convention="ccdc:9" atomRefs2="a1 a2"/&gt;</tt> could
         represent a delocalised bond in the CCDC convention.</p>
          </div>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:string">
        <xsd:enumeration value="S">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">Single bond.</div>
             </xsd:documentation>
           </xsd:annotation>
        </xsd:enumeration>
        <xsd:enumeration value="1">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">Single bond.</div>
             </xsd:documentation>
           </xsd:annotation>
        </xsd:enumeration>
        <xsd:enumeration value="D">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">Double bond.</div>
             </xsd:documentation>
           </xsd:annotation>
        </xsd:enumeration>
        <xsd:enumeration value="2">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">Double bond.</div>
             </xsd:documentation>
           </xsd:annotation>
        </xsd:enumeration>
        <xsd:enumeration value="T">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">Triple bond.</div>
             </xsd:documentation>
           </xsd:annotation>
        </xsd:enumeration>
        <xsd:enumeration value="3">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">Triple bond.</div>
             </xsd:documentation>
           </xsd:annotation>
        </xsd:enumeration>
        <xsd:enumeration value="A">
           <xsd:annotation>
             <xsd:documentation>
               <div xmlns="" class="summary">Aromatic bond.</div>
             </xsd:documentation>
           </xsd:annotation>
        </xsd:enumeration>
      </xsd:restriction>
   </xsd:simpleType><xsd:simpleType name="stateType" id="st.stateType">  
      <xsd:annotation>
         <xsd:documentation>
           <div xmlns="" class="summary">State of a substance or property.</div>
           <div xmlns="" class="description">
            <p>The state(s) of matter appropriate to a substance or property. It follows a partially controlled vocabulary. It can be extended through namespace codes to dictionaries</p> 
           </div>
           <div xmlns="" class="example">
           </div>
         </xsd:documentation>
      </xsd:annotation>
      <xsd:restriction base="xsd:string">
        <xsd:enumeration value="aqueous">
          <xsd:annotation>
            <xsd:documentation>
            An aqueous solution
            </xsd:documentation>
          </xsd:annotation>
        </xsd:enumeration>
        <xsd:enumeration value="gas">
          <xsd:annotation>
            <xsd:documentation>
              Gas or vapor. The default state for computation on isolated molecules
            </xsd:documentation>
          </xsd:annotation>
        </xsd:enumeration>
        <xsd:enumeration value="glass">
          <xsd:annotation>
            <xsd:documentation>
            A glassy state
            </xsd:documentation>
          </xsd:annotation>
        </xsd:enumeration>
        <xsd:enumeration value="liquid">
          <xsd:annotation>
            <xsd:documentation>
            Normally pure liquid (use solution where appropriate)
            </xsd:documentation>
          </xsd:annotation>
        </xsd:enumeration>
        <xsd:enumeration value="nematic">
          <xsd:annotation>
            <xsd:documentation>
           The nematic phase
            </xsd:documentation>
          </xsd:annotation>
        </xsd:enumeration>
        <xsd:enumeration value="smectic">
          <xsd:annotation>
            <xsd:documentation>
           The smectic phase
            </xsd:documentation>
          </xsd:annotation>
        </xsd:enumeration>
        <xsd:enumeration value="solid">
          <xsd:annotation>
            <xsd:documentation>
            A solid
            </xsd:documentation>
          </xsd:annotation>
        </xsd:enumeration>
        <xsd:enumeration value="solidSolution">
          <xsd:annotation>
            <xsd:documentation>
            A solid solution
            </xsd:documentation>
          </xsd:annotation>
        </xsd:enumeration>
        <xsd:enumeration value="solution">
          <xsd:annotation>
            <xsd:documentation>
            A (liquid) solution
            </xsd:documentation>
          </xsd:annotation>
        </xsd:enumeration>
      </xsd:restriction>
   </xsd:simpleType><xsd:simpleType name="stereoType" id="st.stereoType">  
   <xsd:annotation>
      <xsd:documentation>
         <div xmlns="" class="summary">(Bond) stereochemistry (as a string).</div>
         <div xmlns="" class="description">
         <p>. This is purely conventional;
               . There is no default value. 
      The emptyString attribute can be used to indicate a bond of 
      unknown or unspecified type. The interpretation of this is outside
      the scope of CML-based algorithms. It may be accompanied by a <tt>convention</tt>
      attribute  which links to a dictionary
         </p> </div>
         <div xmlns="" class="example" href="cmlCore/examples/bond1.xml">&lt;cml title="bondArray example"&gt;<br/>  &lt;bondArray&gt;<br/>    &lt;bond id="b1" atomRefs2="a3 a8" order="D"&gt;<br/>      &lt;electron bondRef="b1"&gt;&lt;/electron&gt;<br/>      &lt;bondStereo&gt;C&lt;/bondStereo&gt;<br/>    &lt;/bond&gt;<br/>    &lt;bond id="b2" atomRefs2="a3 a8" order="S"&gt;<br/>      &lt;bondStereo convention="MDL" conventionValue="6"&gt;&lt;/bondStereo&gt;<br/>    &lt;/bond&gt;<br/>  &lt;/bondArray&gt;<br/>&lt;/cml&gt;</div>
      </xsd:documentation>
   </xsd:annotation>
   <xsd:restriction base="xsd:string">
               <xsd:enumeration value="C">
   <xsd:annotation>
      <xsd:documentation>
         <div xmlns="" class="summary">A cis bond.</div>
      </xsd:documentation>
   </xsd:annotation>
                </xsd:enumeration>
               <xsd:enumeration value="T">
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A trans bond.</div>
      </xsd:documentation>
   </xsd:annotation>
                </xsd:enumeration>
               <xsd:enumeration value="W">
   <xsd:annotation>
      <xsd:documentation>
         <div xmlns="" class="summary">A wedge bond.</div>
      </xsd:documentation>
   </xsd:annotation>
                </xsd:enumeration>
               <xsd:enumeration value="H">
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A hatch bond.</div>
      </xsd:documentation>
   </xsd:annotation>
                </xsd:enumeration>
               <xsd:enumeration value="">
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">empty or missing.</div>
      </xsd:documentation>
   </xsd:annotation>
                </xsd:enumeration>
   </xsd:restriction>
</xsd:simpleType><xsd:simpleType name="torsionAngleType" id="st.torsionAngleType">  
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">The type of a torsion angle.</div>
      </xsd:documentation>
   </xsd:annotation>
   <xsd:restriction base="xsd:float">
      <xsd:minInclusive value="-360.0"/>
      <xsd:maxInclusive value="360.0"/>
   </xsd:restriction>
</xsd:simpleType><xsd:attributeGroup id="attGp.inherit" name="inherit">

  <xsd:attribute id="att.inherit" name="inherit">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">Inheritance mechanism (e.g. atoms, molecules).</div>
        <div xmlns="">
          <p>A reference to an existing element can be used to supplement values such as coordinates.  The <tt>inheritance</tt> attribute determines whether the values are supplemented, overwritten or deleted. In the example:
<pre>
&lt;molecule id="m1" view="initial"&gt;
  &lt;atomArray&gt;
    &lt;atom id="a1" x3="0.1"/&gt;
  &lt;/atomArray&gt;
&lt;/molecule&gt;
&lt;!-- this adds more information --&gt;
&lt;molecule ref="m1" view="initial" inherit="supplement"&gt;
  &lt;atomArray&gt;
    &lt;atom id="a1" hydrogenCount="1"/&gt;
  &lt;/atomArray&gt;
&lt;/molecule&gt;
&lt;!-- this will overwrite the previous values --&gt;
&lt;molecule ref="m1" inherit="overwrite" view="final" id="m2"&gt;
  &lt;atomArray&gt;
    &lt;atom id="a1" x3="0.1"/&gt;
  &lt;/atomArray&gt;
&lt;/molecule&gt;
&lt;!-- this will delete the previous values --&gt;
&lt;molecule ref="m1" inherit="delete" view="restart"&gt;
  &lt;atomArray&gt;
    &lt;atom id="a1" hydrogenCount=""/&gt;
  &lt;/atomArray&gt;
&lt;/molecule&gt;
</pre>
            the first <tt>molecule/@ref</tt> adds complementary information, the second
            changes the values. Software is allowed to generate two independent copies of the molecule and reference them by different IDs (<tt>m1</tt> and <tt>m2</tt>).
          </p>
          <p>This mechanism is necessary to manage the implied inheritance of partial information during minimisations and dynamics. It requires careful software implementation.
          </p>
        </div>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:simpleType>
      <xsd:restriction base="xsd:string">
        <xsd:enumeration value="merge">
          <xsd:annotation>
            <xsd:documentation>
              <div xmlns="" class="summary">Values from this element will be merged.</div>
              <div xmlns="">The merging is element-specific with the intention that information from the current element will not conflict with the existing information. It is an error if there is a conflict.</div>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:enumeration>
        <xsd:enumeration value="replace">
          <xsd:annotation>
            <xsd:documentation>
              <div xmlns="" class="summary">Values from this element will replace existing information.</div>
              <div xmlns="">The merging is element-specific with the intention that information from the current element will replace the existing information.</div>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:enumeration>
        <xsd:enumeration value="delete">
          <xsd:annotation>
            <xsd:documentation>
              <div xmlns="" class="summary">Components of this element will de deleted if they exist.</div>
            </xsd:documentation>
          </xsd:annotation>
        </xsd:enumeration>
      </xsd:restriction>
    </xsd:simpleType>
  </xsd:attribute>

  <xsd:attribute id="att.instance" name="instance" type="xsd:string">
    <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A label for an inherited extension of an element.</div>
        <div xmlns="">It is useful to add a label to an inherited extension (the id mechanism is fragile in this context). Typical values could be "initial", "minimised", "final", "snapshot33", "eclipsed", etc.</div>
      </xsd:documentation>
    </xsd:annotation>
  </xsd:attribute>

</xsd:attributeGroup><xsd:element name="arg" id="el.arg">  
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">An argument for a funtion or similar beast.
        </div>
        <div xmlns="" class="description"><p>Experimental. Arguments can be typed and have explicit or free values. </p>
      </div>
        <div xmlns="" class="example" href="cmlComp/examples/potential1.xml">&lt;--   Li c O  c Buckingham 0.115E+04 0.280     .000E+00 .000E+00   0.000 10.000 --&gt;&lt;potential form="gulp:buckingham"&gt;<br/>   &lt;arg name="atom1"&gt;<br/>     &lt;atom atomTypeRef="gulp:at.li"&gt;&lt;/atom&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg name="atom2"&gt;<br/>     &lt;atom atomTypeRef="gulp:at.o"&gt;&lt;/atom&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.a"&gt;<br/>     &lt;scalar units="units:ev"&gt;0.115E+04&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.b"&gt;<br/>     &lt;scalar units="units:angstrom"&gt;0.280&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.c"&gt;<br/>     &lt;scalar units="units:ev"&gt;.000E+00&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/> &lt;/potential&gt;</div>
     </xsd:documentation>
   </xsd:annotation>

   <xsd:complexType><xsd:sequence><xsd:choice minOccurs="0" maxOccurs="unbounded">
         <xsd:element ref="atom"/>
         <xsd:element ref="scalar"/>
         <xsd:element ref="array"/>
         <xsd:element ref="matrix"/>
         <xsd:element ref="expression"/>
       </xsd:choice></xsd:sequence><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attributeGroup ref="ref"/><xsd:attribute name="name" type="xsd:string">
       <xsd:annotation>
         <xsd:documentation>
           <div xmlns="">
             <p>The name of the argument</p>
           </div>
         </xsd:documentation>
       </xsd:annotation>
     </xsd:attribute><xsd:attribute name="dataType" type="namespaceRefType">
       <xsd:annotation>
         <xsd:documentation>
           <div xmlns="">
             <p>The dataType of the argument (required when free)</p>
           </div>
         </xsd:documentation>
       </xsd:annotation>
     </xsd:attribute></xsd:complexType>
</xsd:element><xsd:element name="atomicBasisFunction" id="el.atomicBasisFunction">  
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">An atomicBasisFunction.
        </div>
        <div xmlns="" class="description"><p>An atomic atomicBasisFunction which can be linked to atoms, eigenvalues/vectors etc. Normally contained within <tt>basisSet</tt></p>
        <p>Normally these are atom-centered functions, but they can also serve as "ghost" functions which are centered on points. IN CCML these can be dummy atoms so that the atomRef mechanism can still be used.</p>
        <p>This information is required to interpret the eignevector components and map them onto the atom list. However this mapping is normally implicit in the program and so it may be necessary to generate <tt>basisSet</tt> information for some programs before XML technology can be automatically used to link the components of the CCML document.</p>
      </div>
        <div xmlns="" class="example">This is a 6-311(d) and has 18 components including unsplit d.
        <pre>
    
        </pre>
        </div>
     </xsd:documentation>
   </xsd:annotation>

   <xsd:complexType><xsd:sequence><xsd:choice minOccurs="0" maxOccurs="unbounded">
        </xsd:choice><xsd:choice minOccurs="0" maxOccurs="1">
          <xsd:element ref="gradient"/>
        </xsd:choice></xsd:sequence><xsd:attribute name="atomRef" type="atomRefType" id="att.atomicBasisFunction.ref">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary"><p>The atom owning this atomicBasisFunction</p></div>
            <div xmlns="">This reference will tie the reported eigenvector components to the list of atoms.</div> 
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attribute name="n" id="att.atomicBasisFunction.n" type="xsd:nonNegativeInteger">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">Principal quantum number.</div>
            <div xmlns="" class="description"><p>1, 2, 3, etc.</p></div>
          </xsd:documentation>
        </xsd:annotation>
     </xsd:attribute><xsd:attribute name="l" id="att.atomicBasisFunction.l" type="xsd:nonNegativeInteger">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">Secondary quantum number.</div>
            <div xmlns="" class="description"><p>0, 1, etc.</p></div>
          </xsd:documentation>
        </xsd:annotation>
     </xsd:attribute><xsd:attribute name="m" id="att.atomicBasisFunction.m" type="xsd:integer">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">Azimuthal quantum number.</div>
            <div xmlns="" class="description"><p>-1, 0, 1, etc.</p></div>
          </xsd:documentation>
        </xsd:annotation>
     </xsd:attribute><xsd:attribute name="lm" id="att.atomicBasisFunction.lm">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">symbolic represention of l amd m.</div>
            <div xmlns="" class="description"><p>s, p, px, dxy, dx2y2, f, etc.</p></div>
          </xsd:documentation>
        </xsd:annotation>
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:enumeration value="s"/>
            <xsd:enumeration value="p"/>
            <xsd:enumeration value="px"/>
            <xsd:enumeration value="py"/>
            <xsd:enumeration value="pz"/>
            <xsd:enumeration value="d"/>
            <xsd:enumeration value="dxy"/>
            <xsd:enumeration value="dyz"/>
            <xsd:enumeration value="dxz"/>
            <xsd:enumeration value="dx2y2"/>
            <xsd:enumeration value="dz2"/>
            <xsd:enumeration value="f"/>
            <xsd:enumeration value="g"/>
          </xsd:restriction>
        </xsd:simpleType>
     </xsd:attribute></xsd:complexType>
 </xsd:element><xsd:element name="atomSet" id="el.atomSet">  
   <xsd:annotation>
     <xsd:documentation>
       <div xmlns="" class="summary">
            A set of references to atoms.
            </div>
         <div xmlns="" class="description">
         <p>
         An atomSet consists of a number of unique references to atoms throught their ids. atomSets need not be related to molecules (which are generally created by aggregation of explicit atoms). Two or more atomSets may reference the same atom, and atomSets may be empty.
         </p>
         <p>atomSets have many potential uses such as:
         <ul>
         <li>identifying functional groups</li>
         <li>results of substructure matching</li>
         <li>identifying atoms with particular roles in a calculation</li>
         </ul>
         </p>
         <p>The atomSet may be referenced from elsewhere in the document and you are encouraged to use locally unique id attributes on atomSets.
         </p>
         </div>
<div xmlns="" class="example" href="cmlComp/examples/atomSet1.xml">&lt;cml&gt;<br/>&lt;atomSet id="as1" title="Group 7 elements"&gt;a2 a3 a4&lt;/atomSet&gt;<br/>&lt;atomSet id="as2" title="first row elements"&gt;a2 a3 a4&lt;/atomSet&gt;<br/>&lt;molecule&gt;<br/>  &lt;atomArray&gt;<br/>    &lt;atom atomTypeRef="a1" elementType="C"&gt;&lt;/atom&gt;<br/>    &lt;atom atomTypeRef="a2" elementType="Br"&gt;&lt;/atom&gt;<br/>    &lt;atom atomTypeRef="a3" elementType="Cl"&gt;&lt;/atom&gt;<br/>    &lt;atom atomTypeRef="a4" elementType="F"&gt;&lt;/atom&gt;<br/>    &lt;atom atomTypeRef="a5" elementType="C" hydrogenCount="3"&gt;&lt;/atom&gt;<br/>  &lt;/atomArray&gt;<br/>&lt;/molecule&gt;<br/>&lt;/cml&gt;
        </div>
       </xsd:documentation>
   </xsd:annotation>
   <xsd:complexType><xsd:simpleContent>
       <xsd:extension base="atomRefArrayType">
          <xsd:attributeGroup ref="tit_id_conv_dictGroup"/>
          <xsd:attributeGroup ref="size"/>
       </xsd:extension>
     </xsd:simpleContent></xsd:complexType>
</xsd:element><xsd:element name="atomType" id="el.atomType">  
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">An atomType.
        </div>
        <div xmlns="" class="description"><p>atomTypes are used in a wide variety of ways in computational chemistry. They are normally labels added to existing atoms (or dummy atoms) in the molecule and have a number of defined properties. These properties are usually in addition to those deducible from the elementType of the atom. AtomTypes usually depend on the chemical or geometrical environment of the atom and are frequently assigned by algorithms with chemical perception. However they are aoften frequently set or "tweaked" by humans initiating a program run.</p>
        <p>AtomTypes on an atom have no formal relation to its <tt>elementType</tt>, which only describe the number of protons in the nucleus. It is not unknown (though potentially misleading) to use an "incompatible" atomType to alter the computational properties of an atom (e.g. pretend this K+ is a Ca++ to increase its effective charge). <tt>atomTypes</tt> will also be required to describe pseudoAtoms such as "halogen" (generic) or "methyl group" (unified atom). Atoms in computations can therefore have an <tt>atomTypeRef</tt> attribute.</p>
        <p>An atomType contains numeric or other quantities associated with it (charges, masses, use in force-fields, etc.) and also description of any perception algorithms (chemical and/or geometrical) which could be used to compute or constrain it. This is still experimental.</p>
        <p>atomTypes are referred to by their mandatory <tt>name</tt> attribute</p>
      </div>
        <div xmlns="" class="example" href="cmlComp/examples/atomType1.xml">&lt;--  define an atomType for Silicon is a forcefield calculation  --&gt;&lt;cml&gt;<br/>&lt;atomType name="foo:sia" convention="foo" title="Silicon type A"&gt;<br/>  &lt;atom elementType="Si"&gt;<br/>  <br/>    &lt;scalar dictRef="foo:ffcharge"&gt;1.7&lt;/scalar&gt;<br/>  &lt;/atom&gt;<br/>&lt;/atomType&gt;<br/><br/>&lt;molecule&gt;<br/>  &lt;atomArray&gt;<br/>    &lt;atom atomTypeRef="foo:sia" x3="0.2" y3="0.2" z3="0.3" title="silicon defect"&gt;&lt;/atom&gt;<br/>  &lt;/atomArray&gt;<br/>&lt;/molecule&gt;<br/>&lt;/cml&gt;</div>
     </xsd:documentation>
   </xsd:annotation>

   <xsd:complexType><xsd:sequence><xsd:choice minOccurs="0" maxOccurs="unbounded">
          <xsd:element ref="molecule"/>
          <xsd:element ref="atom"/>
        </xsd:choice><xsd:choice minOccurs="0" maxOccurs="unbounded">
          <xsd:element ref="scalar"/>
          <xsd:element ref="array"/>
          <xsd:element ref="matrix"/>
          <xsd:element ref="property"/>
        </xsd:choice></xsd:sequence><xsd:attribute name="name" type="namespaceRefType" id="att.atomType.name">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary"><p>A unique name for the atomType</p></div>
            <div xmlns=""><p>The name will usually be namespaced as 'gulp:si', 'tripos:c.3', etc. It must occur except for atomType/@ref</p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attribute name="ref" type="refType" id="att.atomType.ref">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary"><p>foo</p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attributeGroup ref="tit_id_conv_dictGroup"/></xsd:complexType>
 </xsd:element><xsd:element name="atomTypeList" id="el.atomTypeList">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A container for one or more atomTypes.
      </div>
      <div xmlns="" class="description">
        <p><tt>atomTypeList</tt> can contain several atomTypes.</p>
      </div>
      <div xmlns="" class="example" href="cmlComp/examples/atomTypeList1.xml">&lt;atomTypeList&gt;<br/>  &lt;atomType name="a:o"&gt;&lt;atom elementType="O"&gt;&lt;/atom&gt;&lt;/atomType&gt;<br/>  &lt;atomType name="a:n"&gt;&lt;atom elementType="N"&gt;&lt;/atom&gt;&lt;/atomType&gt;<br/>&lt;/atomTypeList&gt;</div>
    </xsd:documentation>
  </xsd:annotation>

  <xsd:complexType><xsd:sequence><xsd:element ref="metadataList" minOccurs="0" maxOccurs="unbounded"/><xsd:element ref="name" minOccurs="0" maxOccurs="unbounded"/><xsd:choice minOccurs="0" maxOccurs="unbounded">
        <xsd:element ref="atomType"/>
      </xsd:choice></xsd:sequence><xsd:attributeGroup ref="dictRef"/><xsd:attributeGroup ref="convention"/><xsd:attributeGroup ref="title"/><xsd:attributeGroup ref="id"/><xsd:attributeGroup ref="ref"/></xsd:complexType>
</xsd:element><xsd:element name="basisSet" id="el.basisSet">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A container for one or more atomicBasisFunctions.
      </div>
      <div xmlns="" class="description">
        <p><tt>basisSet</tt> can contain several orbitals.</p>
      </div>
      <div xmlns="" class="example" href="cmlComp/examples/basisSet1.xml">&lt;basisSet&gt;<br/>  &lt;name&gt;631-G*&lt;/name&gt;<br/>  &lt;atomicBasisFunction&gt;&lt;/atomicBasisFunction&gt;<br/>&lt;/basisSet&gt;</div>
    </xsd:documentation>
  </xsd:annotation>

  <xsd:complexType><xsd:sequence><xsd:element ref="metadataList" minOccurs="0" maxOccurs="unbounded"/><xsd:element ref="name" minOccurs="0" maxOccurs="unbounded"/><xsd:choice minOccurs="0" maxOccurs="unbounded">
        <xsd:element ref="atomicBasisFunction"/>
      </xsd:choice></xsd:sequence><xsd:attributeGroup ref="dictRef"/><xsd:attributeGroup ref="convention"/><xsd:attributeGroup ref="title"/><xsd:attributeGroup ref="id"/><xsd:attributeGroup ref="ref"/><xsd:attribute name="role" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          <div xmlns="">
            <p>The role of the basisSet. Semantics are not yet controlled</p>
          </div>
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute></xsd:complexType>
</xsd:element><xsd:element name="bondSet" id="el.bondSet">  
   <xsd:annotation>
     <xsd:documentation>
       <div xmlns="" class="summary">
            A set of references to bonds.
            </div>
         <div xmlns="" class="description">
         <p>
         An bondSet consists of a number of unique references to bonds throught their ids. bondSets need not be related to molecules (which are generally created by aggregation of explicit bonds). Two or more bondSets may reference the same bond, and bondSets may be empty.
         </p>
         <p>bondSets have many potential uses such as:
         <ul>
         <li>identifying functional groups</li>
         <li>results of substructure matching</li>
         <li>identifying bonds with particular roles in a calculation</li>
         </ul>
         </p>
         <p>The bondSet may be referenced from elsewhere in the document and you are encouraged to use locally unique id attributes on bondSets.
         </p>
         </div>
<div xmlns="" class="example" href="cmlComp/examples/bondSet1.xml">&lt;cml&gt;<br/>&lt;bondSet id="bs1" title="rotatable bonds"&gt;b4&lt;/bondSet&gt;<br/>&lt;bondSet id="bs2" title="carbon-halogen bonds"&gt;b1 b2 b3&lt;/bondSet&gt;<br/>&lt;molecule&gt;<br/>  &lt;atomArray&gt;<br/>    &lt;atom atomTypeRef="a1" elementType="C"&gt;&lt;/atom&gt;<br/>    &lt;atom atomTypeRef="a2" elementType="Br"&gt;&lt;/atom&gt;<br/>    &lt;atom atomTypeRef="a3" elementType="Cl"&gt;&lt;/atom&gt;<br/>    &lt;atom atomTypeRef="a4" elementType="F"&gt;&lt;/atom&gt;<br/>    &lt;atom atomTypeRef="a5" elementType="C" hydrogenCount="3"&gt;&lt;/atom&gt;<br/>  &lt;/atomArray&gt;<br/>  &lt;bondArray&gt;<br/>    &lt;bond id="b1" atomRefs2="a1 a2"&gt;&lt;/bond&gt;<br/>    &lt;bond id="b2" atomRefs2="a1 a3"&gt;&lt;/bond&gt;<br/>    &lt;bond id="b3" atomRefs2="a1 a4"&gt;&lt;/bond&gt;<br/>    &lt;bond id="b4" atomRefs2="a1 a5"&gt;&lt;/bond&gt;<br/>  &lt;/bondArray&gt;<br/>&lt;/molecule&gt;<br/>&lt;/cml&gt;
        </div>
       </xsd:documentation>
   </xsd:annotation>
   <xsd:complexType><xsd:simpleContent>
       <xsd:extension base="bondRefArrayType">
          <xsd:attributeGroup ref="tit_id_conv_dictGroup"/>
          <xsd:attributeGroup ref="size"/>
       </xsd:extension>
     </xsd:simpleContent></xsd:complexType>
</xsd:element><xsd:element name="expression" id="el.expression">  
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">An expression, which can be evaluated.
        </div>
        <div xmlns="" class="description"><p>Experimental. This is essentially a mathematical function, expressed currently in reverse Polish notation.</p>
      </div>
        <div xmlns="" class="example" href="cmlComp/examples/potential1.xml">&lt;--   Li c O  c Buckingham 0.115E+04 0.280     .000E+00 .000E+00   0.000 10.000 --&gt;&lt;potential form="gulp:buckingham"&gt;<br/>   &lt;arg name="atom1"&gt;<br/>     &lt;atom atomTypeRef="gulp:at.li"&gt;&lt;/atom&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg name="atom2"&gt;<br/>     &lt;atom atomTypeRef="gulp:at.o"&gt;&lt;/atom&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.a"&gt;<br/>     &lt;scalar units="units:ev"&gt;0.115E+04&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.b"&gt;<br/>     &lt;scalar units="units:angstrom"&gt;0.280&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.c"&gt;<br/>     &lt;scalar units="units:ev"&gt;.000E+00&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/> &lt;/potential&gt;</div>
     </xsd:documentation>
   </xsd:annotation>

   <xsd:complexType><xsd:sequence><xsd:choice minOccurs="0" maxOccurs="unbounded">
         <xsd:element ref="parameter"/>
         <xsd:element ref="operator"/>
         </xsd:choice></xsd:sequence><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attribute name="dataType" type="namespaceRefType">
       <xsd:annotation>
         <xsd:documentation>
           <div xmlns="">
             <p>The type of the element returned by this expression</p>
           </div>
         </xsd:documentation>
       </xsd:annotation>
     </xsd:attribute></xsd:complexType>
</xsd:element><xsd:element name="eigen" id="el.eigen">  
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">An element to hold eigenstuff.
        </div>
        <div xmlns="" class="description"><p>Not yet written</p>
      </div>
        <div xmlns="" class="example" href="cmlComp/examples/eigen1.xml">&lt;eigen&gt;<br/>  &lt;array dataType="xsd:float"&gt;1 2 3&lt;/array&gt;<br/>  &lt;matrix dataType="xsd:float" rows="3" columns="3"&gt;1 2 3 4 5 6 7 8 9&lt;/matrix&gt;<br/>&lt;/eigen&gt;</div>
     </xsd:documentation>
   </xsd:annotation>

   <xsd:complexType><xsd:sequence><xsd:element ref="array" minOccurs="0"/><xsd:element ref="matrix" minOccurs="0"/></xsd:sequence><xsd:attribute name="foo" id="att.eigen.units" type="xsd:string">
               <xsd:annotation>
                  <xsd:documentation>
                    <div xmlns="" class="summary"><p>foo</p>
                  </div>
                  </xsd:documentation>
               </xsd:annotation>
            </xsd:attribute><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attribute name="type" id="att.eigen.eigenType" type="xsd:string">
              <xsd:annotation>
                 <xsd:documentation>
                  <div xmlns="" class="summary">Type of eigen.</div>
                  <div xmlns="" class="description">To be determined.</div>
              </xsd:documentation>
            </xsd:annotation>
         </xsd:attribute></xsd:complexType>
</xsd:element><xsd:element name="gradient" id="el.gradient">  
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A gradient.
        </div>
        <div xmlns="" class="description"><p>A container for a quantity or quantities representing the gradient of other quantities</p>
      </div>
        <div xmlns="" class="example" href="cmlComp/examples/gradient1.xml">&lt;gradient dictRef="ccml:gradient"&gt;<br/>  &lt;scalar units="units:kcal/mole/a"&gt;1.3&lt;/scalar&gt;&lt;/gradient&gt;</div>
     </xsd:documentation>
   </xsd:annotation>

   <xsd:complexType><xsd:sequence><xsd:choice minOccurs="0" maxOccurs="unbounded">
         <xsd:element ref="scalar"/>
         <xsd:element ref="array"/>
         <xsd:element ref="matrix"/>
         <xsd:element ref="property"/>
       </xsd:choice></xsd:sequence><xsd:attributeGroup ref="tit_id_conv_dictGroup"/></xsd:complexType>
</xsd:element><xsd:element name="module" id="el.module">  
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A module in a calculation.
        </div>
        <div xmlns="" class="description"><p>Many programs are based on discrete modules which produce chunks of output. There are also conceptual chunks such as initialisation, calculation and summary/final which often have finer submodules such as cycle, iteration, snapshot, etc. There is no controlled vocabulary but a typical structure is:
        <pre>
&lt;module type="initial"&gt;
  &lt;!-- initial values listed here --&gt;
&lt;/module&gt;        
&lt;module type="geometryOptimisation"&gt;
  &lt;module number="1"&gt;
  &lt;/module&gt;        
  &lt;module number="2"&gt;
  &lt;/module&gt;        
  &lt;!-- ... --&gt;
  &lt;module number="20"&gt;
  &lt;/module&gt;        
  &lt;module type="final"&gt;
    &lt;!-- values on last cycle/module listed here --&gt;
  &lt;/module&gt;        
&lt;/module&gt;        
&lt;module type="final"&gt;
  &lt;!-- final values listed here --&gt;
&lt;/module&gt;        
        </pre>
        One of the challenges of CCML is to find communality between different programs and to use agreed abstractions for the modules.
        </p>
      </div>
        <div xmlns="" class="example">

        <pre>Not yet written</pre>
        </div>
     </xsd:documentation>
   </xsd:annotation>

   <xsd:complexType><xsd:sequence><xsd:any minOccurs="0" maxOccurs="unbounded" processContents="lax"/></xsd:sequence><xsd:attribute name="serial" id="att.module.serial" type="xsd:string">
         <xsd:annotation>
            <xsd:documentation>
              <div xmlns="" class="summary">Serial number (or other instance id).</div>
              <div xmlns="" class="summary">Modules with the same <tt>role</tt> attribute can be distinguished by <tt>serial</tt>. This is often an integer but other schemes may be used.</div>
            </xsd:documentation>
         </xsd:annotation>
      </xsd:attribute><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attribute name="role" id="att.module.role" type="xsd:string">
        <xsd:annotation>
           <xsd:documentation>
            <div xmlns="" class="summary">Role of module.</div>
            <div xmlns="" class="description">The module can have a program-specific name through its title or dictRef (e.g. "MINIM", "l201") and a generic role ("dynamicsCalculation", "equilibration", etc.). In general role will be controlled by CCML.</div>
           </xsd:documentation>
         </xsd:annotation>
      </xsd:attribute></xsd:complexType>
</xsd:element><xsd:element name="operator" id="el.operator">  
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">An operator within an expression.
        </div>
        <div xmlns="" class="description"><p>Experimental. An operator acts on one or more arguments (at present the number is fixed by the type). The formulation is reverse Polish so the result (with its dataType) is put on a stack for further use</p>
      </div>
        <div xmlns="" class="example" href="cmlComp/examples/potential1.xml">&lt;--   Li c O  c Buckingham 0.115E+04 0.280     .000E+00 .000E+00   0.000 10.000 --&gt;&lt;potential form="gulp:buckingham"&gt;<br/>   &lt;arg name="atom1"&gt;<br/>     &lt;atom atomTypeRef="gulp:at.li"&gt;&lt;/atom&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg name="atom2"&gt;<br/>     &lt;atom atomTypeRef="gulp:at.o"&gt;&lt;/atom&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.a"&gt;<br/>     &lt;scalar units="units:ev"&gt;0.115E+04&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.b"&gt;<br/>     &lt;scalar units="units:angstrom"&gt;0.280&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.c"&gt;<br/>     &lt;scalar units="units:ev"&gt;.000E+00&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/> &lt;/potential&gt;</div>
     </xsd:documentation>
   </xsd:annotation>

   <xsd:complexType><xsd:sequence><xsd:choice minOccurs="0" maxOccurs="unbounded">
       </xsd:choice></xsd:sequence><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attribute name="type" type="xsd:string">
       <xsd:annotation>
         <xsd:documentation>
           <div xmlns="">
             <p>The type of the operator (minus, mult, distance, etc.) This will be enumerated when I have time...</p>
           </div>
         </xsd:documentation>
       </xsd:annotation>
     </xsd:attribute></xsd:complexType>
</xsd:element><xsd:element name="particle" id="el.particle">  
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">An object in space carrying a set of properties.
        </div>
        <div xmlns="" class="description"><p><tt>particles</tt> have many of the characteristics of <tt>atom</tt>s but without at atomic nucleus. It does not have an elementType and cannot be involved in bonding, etc. It has coordinates, may carry charge and might have a mass. It represents some aspect of a computational model and should not be used for purely geometrical concepts such as centroid. Examples of particles are "shells" (e.g. in GULP)  which are linked to atoms for modelling polarizability or lonepairs and approximations to multipoles. </p>
<p>Properties such as charge, mass should be scalar/array/matrix children.</p>        
      </div>
        <div xmlns="" class="example">
        <pre/>
        </div>
     </xsd:documentation>
   </xsd:annotation>

   <xsd:complexType><xsd:sequence><xsd:any minOccurs="0" maxOccurs="unbounded" processContents="lax"/></xsd:sequence><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attribute name="particleType" type="particleRefType" id="att.particleType.ref">
       <xsd:annotation>
         <xsd:documentation>
           <div xmlns="" class="summary">The type of the particle</div>
           <div xmlns="" class="description">Used in a similar manner to <tt>atomType</tt>. Examples might be "lonePair", "polarizable Oxygen", etc.</div>
         </xsd:documentation>
       </xsd:annotation>
     </xsd:attribute><xsd:attribute name="x3" type="coordinateComponentArrayType" id="att.particle.x3">
       <xsd:annotation>
         <xsd:documentation>
           <div xmlns="" class="summary">The x-coordinate in Cartesian coordinates.</div>
         </xsd:documentation>
       </xsd:annotation>
     </xsd:attribute><xsd:attribute name="y3" type="coordinateComponentArrayType" id="att.particle.y3">
       <xsd:annotation>
         <xsd:documentation>
           <div xmlns="" class="summary">The y-coordinate in Cartesian coordinates.</div>
         </xsd:documentation>
       </xsd:annotation>
     </xsd:attribute><xsd:attribute name="z3" type="coordinateComponentArrayType" id="att.particle.z3">
       <xsd:annotation>
         <xsd:documentation>
           <div xmlns="" class="summary">The z-coordinate in Cartesian coordinates.</div>
         </xsd:documentation>
       </xsd:annotation>
     </xsd:attribute></xsd:complexType>
</xsd:element><xsd:element name="potential" id="el.potential">
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">An explicit potential (as in a forcefield).
        </div>
        <div xmlns="" class="description"><p>Experimental. This represents the actual function for the potential (i.e. with explicit values) rather than the functional form, which will normally be referenced from this.</p>
      </div>
        <div xmlns="" class="example" href="cmlComp/examples/potential1.xml">&lt;--   Li c O  c Buckingham 0.115E+04 0.280     .000E+00 .000E+00   0.000 10.000 --&gt;&lt;potential form="gulp:buckingham"&gt;<br/>   &lt;arg name="atom1"&gt;<br/>     &lt;atom atomTypeRef="gulp:at.li"&gt;&lt;/atom&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg name="atom2"&gt;<br/>     &lt;atom atomTypeRef="gulp:at.o"&gt;&lt;/atom&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.a"&gt;<br/>     &lt;scalar units="units:ev"&gt;0.115E+04&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.b"&gt;<br/>     &lt;scalar units="units:angstrom"&gt;0.280&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.c"&gt;<br/>     &lt;scalar units="units:ev"&gt;.000E+00&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/> &lt;/potential&gt;</div>
     </xsd:documentation>
   </xsd:annotation>

   <xsd:complexType><xsd:sequence><xsd:choice minOccurs="0" maxOccurs="unbounded">
         <xsd:element ref="arg"/>
       </xsd:choice></xsd:sequence><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attribute name="form" type="namespaceRefType">
       <xsd:annotation>
         <xsd:documentation>
           <div xmlns="" class="summary">A reference to the functional form used for this instance of the potential.</div>
         </xsd:documentation>
       </xsd:annotation>
     </xsd:attribute></xsd:complexType>
</xsd:element><xsd:element name="potentialForm" id="el.potentialForm">  
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">The functional form of a potential.
        </div>
        <div xmlns="" class="description"><p>Experimental. This has generic arguments and parameters rather than explicit ones. It is essentially a mathematical function, expressed currently in reverse Polish notation.</p>
      </div>
        <div xmlns="" class="example" href="cmlComp/examples/potential1.xml">&lt;--   Li c O  c Buckingham 0.115E+04 0.280     .000E+00 .000E+00   0.000 10.000 --&gt;&lt;potential form="gulp:buckingham"&gt;<br/>   &lt;arg name="atom1"&gt;<br/>     &lt;atom atomTypeRef="gulp:at.li"&gt;&lt;/atom&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg name="atom2"&gt;<br/>     &lt;atom atomTypeRef="gulp:at.o"&gt;&lt;/atom&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.a"&gt;<br/>     &lt;scalar units="units:ev"&gt;0.115E+04&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.b"&gt;<br/>     &lt;scalar units="units:angstrom"&gt;0.280&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.c"&gt;<br/>     &lt;scalar units="units:ev"&gt;.000E+00&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/> &lt;/potential&gt;</div>
     </xsd:documentation>
   </xsd:annotation>

   <xsd:complexType><xsd:sequence><xsd:choice minOccurs="0" maxOccurs="unbounded">
         <xsd:element ref="arg"/>
       </xsd:choice><xsd:choice minOccurs="0" maxOccurs="unbounded">
         <xsd:element ref="parameter"/>
       </xsd:choice><xsd:choice minOccurs="0" maxOccurs="1">
         <xsd:element ref="expression"/>
       </xsd:choice></xsd:sequence><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attribute name="name" type="namespaceRefType">
       <xsd:annotation>
         <xsd:documentation>
           <div xmlns="">
             <p>name of this functional form (usually namespaced)</p>
           </div>
         </xsd:documentation>
       </xsd:annotation>
     </xsd:attribute></xsd:complexType>
</xsd:element><xsd:element name="potentialList" id="el.potentialList">  
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A container for explicit potentials.
        </div>
        <div xmlns="" class="description"><p>Experimental. </p>
      </div>
        <div xmlns="" class="example" href="cmlComp/examples/potential1.xml">&lt;--   Li c O  c Buckingham 0.115E+04 0.280     .000E+00 .000E+00   0.000 10.000 --&gt;&lt;potential form="gulp:buckingham"&gt;<br/>   &lt;arg name="atom1"&gt;<br/>     &lt;atom atomTypeRef="gulp:at.li"&gt;&lt;/atom&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg name="atom2"&gt;<br/>     &lt;atom atomTypeRef="gulp:at.o"&gt;&lt;/atom&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.a"&gt;<br/>     &lt;scalar units="units:ev"&gt;0.115E+04&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.b"&gt;<br/>     &lt;scalar units="units:angstrom"&gt;0.280&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/>   &lt;arg ref="gulp:buckingham.c"&gt;<br/>     &lt;scalar units="units:ev"&gt;.000E+00&lt;/scalar&gt;<br/>   &lt;/arg&gt;<br/> &lt;/potential&gt;</div>
     </xsd:documentation>
   </xsd:annotation>

   <xsd:complexType><xsd:sequence><xsd:choice minOccurs="0" maxOccurs="unbounded">
         <xsd:element ref="potential"/>
       </xsd:choice></xsd:sequence><xsd:attributeGroup ref="tit_id_conv_dictGroup"/></xsd:complexType>
</xsd:element><xsd:element name="parameter" id="el.parameter">  
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A parameter describing the computation.
        </div>
        <div xmlns="" class="description"><p>A parameter is a broad concept and can describe numeric quantities, objects, keywords, etc. The distinction between keywords and parameters is often fuzzy. ("MINIM" might mean "minimize", while "MINIM=3" might require  three iterations to be run. It may help to think of control keywords as boolean parameters. </p>
        <p>Numeric parameters can describe values in molecules, forcefields or other objects. Often the parameters will be refined or otherwise varied during the calculation. Some parameters may be fixed at particulat values or relaxed at different stages in the calculation.  Parameters can have errors, gradients and other indications of uncertainty.</p>
        <p>String/character parameters are often abbreviated in program input, and this is supported through the <tt>regex</tt> and <tt>ignoreCase</tt> attributes. </p>
        <p>Parameters will usually be defined separately from the objects and use the <tt>ref</tt> attribute to reference them.</p>
        <p>Parameters can be used to describe additional constraints. This will probably require the development of a microlanguage and until then may use program-specific mecxhanisms. A common approach will be to use an array of values (or objects) to represent different input values for (parts of) the calculation. Thus a conformational change could be specified by an array of several torsion angles.</p>
        <p>A parameter will frequently have a <tt>dictRef</tt> pointing to a dictionary which may have more information about how the parameter is to be used or the values it can take. </p>
        <p>The allowable content of <tt>parameter</tt>s may be shown by a "template" in the <tt>appinfo</tt>; this is stil experimental.</p>
      </div>
        <div xmlns="" class="example" href="cmlComp/examples/parameter1.xml">&lt;parameter role="ccml:keyword" dictRef="gulp:optimize"&gt;&lt;/parameter&gt;</div>
     </xsd:documentation>
   </xsd:annotation>

   <xsd:complexType><xsd:sequence><xsd:choice minOccurs="0" maxOccurs="unbounded">
          <xsd:element ref="scalar"/>
          <xsd:element ref="array"/>
          <xsd:element ref="matrix"/>
          <xsd:element ref="property"/>
          <xsd:element ref="expression"/>
        </xsd:choice><xsd:choice minOccurs="0" maxOccurs="1">
          <xsd:element ref="gradient"/>
        </xsd:choice></xsd:sequence><xsd:attribute name="ref" type="refType" id="att.parameter.ref">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary"><p>Reference to an element</p></div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attributeGroup ref="tit_id_conv_dictGroup"/><xsd:attribute name="value" id="att.parameter.value" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">Value of scalar parameter.</div>
            <div xmlns="" class="description">This is a shorthand for a single scalar value of the parameter. It should only be used with the <tt>ref</tt> attribute as it inherits all the dataTyping of the referenced element. It must not be used for defining new parameters as it has no mechanism for units and dataTyping. [This may change?].</div>
          </xsd:documentation>
        </xsd:annotation>
      </xsd:attribute><xsd:attribute name="constraint" id="att.parameter.constraint" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">Constraint on a parameter.</div>
            <div xmlns="" class="description"><p>Semantics not yet finalised. We anticipate "fixed", "none" and symbolic relationships to other parameters</p></div>
          </xsd:documentation>
        </xsd:annotation>
     </xsd:attribute><xsd:attribute name="name" id="att.parameter.name" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">Name of a parameter.</div>
            <div xmlns="" class="description"><p/></div>
          </xsd:documentation>
        </xsd:annotation>
     </xsd:attribute><xsd:attribute name="role" id="att.parameter.role" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>
            <div xmlns="" class="summary">Role of a parameter.</div>
            <div xmlns="" class="description"><p>Used to define concepts such as independent and dependent variables</p></div>
          </xsd:documentation>
        </xsd:annotation>
     </xsd:attribute></xsd:complexType>
 </xsd:element><xsd:element name="parameterList" id="el.parameterList">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A container for one or more parameters.
      </div>
      <div xmlns="" class="description">
        <p><tt>parameterList</tt> can contain several parameters.</p>
      </div>
      <div xmlns="" class="example" href="cmlComp/examples/parameterList1.xml">&lt;parameterList&gt;<br/>           &lt;parameter role="ccml:keyword" dictRef="gulp:optimize"&gt;&lt;/parameter&gt;<br/>           &lt;parameter role="ccml:keyword" dictRef="gulp:conp"&gt;&lt;/parameter&gt;<br/>           &lt;parameter role="ccml:keyword" dictRef="gulp:property"&gt;&lt;/parameter&gt;<br/>           &lt;parameter role="ccml:keyword" dictRef="gulp:phonon"&gt;&lt;/parameter&gt;<br/>           &lt;parameter role="ccml:keyword" dictRef="gulp:bond"&gt;&lt;/parameter&gt;<br/>           &lt;parameter role="ccml:keyword" dictRef="gulp:angle"&gt;&lt;/parameter&gt;<br/>           &lt;parameter role="ccml:keyword" dictRef="gulp:compare"&gt;&lt;/parameter&gt;<br/>         &lt;/parameterList&gt;</div>
    </xsd:documentation>
  </xsd:annotation>

  <xsd:complexType><xsd:sequence><xsd:element ref="metadataList" minOccurs="0" maxOccurs="unbounded"/><xsd:element ref="name" minOccurs="0" maxOccurs="unbounded"/><xsd:choice minOccurs="0" maxOccurs="unbounded">
        <xsd:element ref="parameter"/>
      </xsd:choice></xsd:sequence><xsd:attributeGroup ref="dictRef"/><xsd:attributeGroup ref="convention"/><xsd:attributeGroup ref="title"/><xsd:attributeGroup ref="id"/><xsd:attributeGroup ref="ref"/><xsd:attribute name="role" type="xsd:string">
      <xsd:annotation>
        <xsd:documentation>
          <div xmlns="">
            <p>The role of the parameterList. Semantics are not yet controlled</p>
          </div>
        </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute></xsd:complexType>
</xsd:element><xsd:element name="zMatrix" id="el.zMatrix">  
   <xsd:annotation>
      <xsd:documentation>
        <div xmlns="" class="summary">A zMatrix.
        </div>
        <div xmlns="" class="description"><p>A container for <tt>length</tt>, <tt>angle</tt> and <tt>torsion</tt>, which must be arranged in the conventional zMatrix format.</p>
      </div>
        <div xmlns="" class="example" href="cmlComp/examples/zMatrix1.xml">&lt;molecule id="mol1" instance="initial"&gt;<br/>      &lt;atomArray&gt;<br/>        &lt;atom id="a1" elementType="C"&gt;&lt;/atom&gt;<br/>        &lt;atom id="a2" elementType="C"&gt;&lt;/atom&gt;<br/>        &lt;atom id="a3" elementType="C"&gt;&lt;/atom&gt;<br/>        &lt;atom id="a4" elementType="C"&gt;&lt;/atom&gt;<br/>      &lt;/atomArray&gt;<br/>      &lt;zMatrix&gt;<br/>      &lt;length id="len1" atomRefs2="a2 a1"&gt;1.42450&lt;/length&gt;<br/>      &lt;length id="len2" atomRefs2="a3 a2"&gt;1.42450&lt;/length&gt;<br/>      &lt;angle id="ang2" atomRefs3="a3 a2 a1"&gt;120.00000&lt;/angle&gt;<br/>      &lt;length id="len3" atomRefs2="a4 a3"&gt;1.42450&lt;/length&gt;<br/>      &lt;angle id="ang3" atomRefs3="a4 a3 a2"&gt;120.00000&lt;/angle&gt;<br/>      &lt;torsion id="tor3" atomRefs4="a4 a3 a2 a1"&gt;0.00000&lt;/torsion&gt;<br/>      &lt;/zMatrix&gt;<br/>    &lt;/molecule&gt;</div>
     </xsd:documentation>
   </xsd:annotation>

   <xsd:complexType><xsd:sequence><xsd:choice minOccurs="0" maxOccurs="unbounded">
         <xsd:element ref="length"/>
         <xsd:element ref="angle"/>
         <xsd:element ref="torsion"/>
       </xsd:choice></xsd:sequence><xsd:attributeGroup ref="tit_id_conv_dictGroup"/></xsd:complexType>
</xsd:element><xsd:simpleType name="particleRefType" id="st.particleRefType">  
  <xsd:annotation>
    <xsd:documentation>
      <div xmlns="" class="summary">A reference to an existing particle.</div>
      <div xmlns="" class="example" href="cmlComp/examples/particleRefType1.xml">&lt;cml title="particleRef example"&gt;<br/>  &lt;molecule id="m1"&gt;<br/>    &lt;atomArray&gt;<br/>      &lt;atom id="a1"&gt;<br/>        &lt;particle id="p1" particleType="pp1"&gt;&lt;/particle&gt;<br/>      &lt;/atom&gt;<br/>    &lt;/atomArray&gt;<br/>  &lt;/molecule&gt;<br/>&lt;/cml&gt;</div>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:restriction base="xsd:string">
    <xsd:pattern value="\s*[A-Za-z_][A-Za-z0-9\-:_]*\s*"/>
  </xsd:restriction>
</xsd:simpleType></xsd:schema>